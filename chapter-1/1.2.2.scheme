(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))
;; プロセスは入力に伴い指数関数的に増加するステップ数が必要。
;; 一方で要求される記憶域は入力に対し線形にしか増加しない。
;; 計算過程の任意のポイントにおいて、木の中のどのノードが☝にあるかのみ追跡する必要があるから。
;; 一般的に、木再帰プロセスにおいて必要とされるステップ数は、木の中のノードの数に比例する。
;; 必要とされる記憶域は木の最大の深さに対して比例する。



(define (fib n)
  (fib-iter 1 0 n))

(define (fib-iter a b count)
  (if (= count 0)
      b
      (fib-iter (+ a b) a (- count 1))))


;;; 例: 両替方法を数える

(define (count-change amount) (cc amount 5))
(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (= kinds-of-coins 0)) 0)
        (else (+ (cc amount
                     (- kinds-of-coins 1))
                 (cc (- amount
                        (first-denomination
                         kinds-of-coins)))))))
(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))

;; (first-denomination手続きは利用可能な効果の種類の数を入力に取り、最初の種類の効果の額面を返す。
;; ここでは効果は最大額面から最小への順に並んでいると仮定するが、どの順序でもうまくいく)

(count-change 100)
; 292

