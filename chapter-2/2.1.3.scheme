2.1.3 データにより何が意味されるのか

data(データ)とは正確には何を意味するのか。
与えられたセレクタとコンストラクタにより実装されたものすべて
と言うのみでは十分ではない。

明らかに3つの手続きの任意の集合すべてが分数実装に対する適切な基準としての役割を果たせるわけではない。

データをセレクタとコンストラクタのある集合とともに、これらの手続きが有効な表現となるために満たさなければならない制約により定義される。

(define (cons x y)
  (define (dispatch m)
    (cond ((= m 0) x)
          ((= m 1) y)
          (else (error "Argument no 0 or 1: CONS" m))))
  dispatch)

(define (car z) (z 0))
(define (cdr z) (z 1))



この手続の使用はデータが何であるべきかという直感的概念のようなものには全く関係しない。
これがペアを表現するのに有効な方法であると示すのに必要なこと全てはこれらの手続きがうえで与えられた制約を満たす。

(cons x y)により返される値は手続き - すなわち内部で定義されたdispatchであること。
それが1つの引数を取りxかyのどちらかを引数が0であるか1であるかしたがって返す。

ペアの手続きによる表現を提示することのポイントは私達の言語がこのように働いているということではなく(Schemeや一般的なLispシステムは効率上の理由からペアを直接的に実装する)、それがこのように働くことができるということ。

手続きによる表現は曖昧だが、ペアを表現するのに完璧に適切な方法。
ペアが満たすべき必要な条件を満たすから。
この例はまた手続きをオブジェクトとして操作する能力が自動的に複合データを表現する能力を提供することを実演した。

このプログラミングスタイルはmessage passingと呼ばる。
