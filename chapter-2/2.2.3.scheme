2.2.3 慣習的インターフェイスとしての列

複合データを用いて働く場合、これまでデータ抽象化がどれだけプログラムの設計をデータ表現の詳細に陥らずに行えるか、
また抽象化がどれだけ代替的な表現方法を試みる柔軟性を保つかについて強調してきました。
この説ではもう一つの強力なデータ構造を用いる設計原則を紹介します。
conventional interface(慣習的インターフェイス)の仕様です。
複合データを扱う類似の操作を形式化する能力は決定的にデータ構造を扱うスタイルに依存する。

(define (sum-odd-squares tree)
  (cond ((null? tree) 0)
        ((not (pair? tree))
         (if (odd? tree) (square tree) 0))
        (else (+ (sum-odd-squares (car tree))
                 (sum-odd-squares (cdr tree))))))

(define (even-fibs n)
  (define (next k)
    (if (> k n)
        nil
        (let ((f (fib k)))
          (if (even? f)
              (cons f (next (+ k 1)))
              (next (+ k 1))))))
  (next 0))

これらの2つの手続きは構造的にとても異なっているという事実にもかかわらず、2つの計算のより抽象的な記述は大きな類似性を明らかにする。

最初のプログラム
・木の葉を列挙する
・フィルタを通して奇数のみを選ぶ
・選択された数の2乗をもトメル
・初期値0にて+を用いて集積する

2つ目のプログラム
・0からnを列挙する
・各整数のフィボナッチ数を求める
・フィルタを通して偶数を選択する
初期値は空リストにてconsを用いて結果を集積する



2つの手続きは演算を異なる方法で分解し、列挙をプログラム全体に広げてmap, filter, accumulationに混ぜました。
もしプログラムを手続き中に信号処理構造の宣言を作るように構成できるのであれば結果としてのコード概念の明快さを増すことが出来るでしょう。


列命令
プログラムを体系化し信号伝達構造をより明確に反映する鍵はある段階の処理から次へと流れる信号に集中すること。
もしこれらの信号をリストとして表現するなら、各段階の処理をリスト操作を用いて実装できる。

(map square (list 1 2 3 4 5))
(1 4 9 16 25)

列をフィルタリングして与えられた述語を満足する要素のみを選択する
(define (filter predicate sequence)
  (cond ((null? sequence) nil)
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

(filter odd? (list 1 2 3 4 5))


集積
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
(accumulate + 0 (list 1 2 3 4 5))
15
(accumulate * 0 (list 1 2 3 4 5))
120
(accumulate cons nil (list 1 2 3 4 5))
(1 2 3 4 5)


要素の列を列挙する
(define (enumrate-interval low high)
  (if (> low high)
      nil
      (cons low (enumrate-interval (+ low 1) high))))
(enumrate-interval 2 7)
(2 3 4 5 6 7)


木の葉を列挙する
(define (enumrate-tree tree)
  (cond ((null? tree) nil)
        ((not (pair? tree)) (list tree))
        (else (append (enumrate-tree (car tree))
                      (enumrate-tree (cdr tree))))))

(enumrate-tree (list 1 (list 2 (list 3 4)) 5))

これでsum-odd-squaresとeven-fibsを信号伝達図のように再形式化することができる。

(define (sum-odd-squares tree)
  (accumulate
   + 0 (map square (filter odd? (enumrate-tree tree)))))

even-fibsに対して0からnの整数を列挙し、これらの整数のそれぞれに対するフィボナッチ数を生成し、
結果列をフィルタにかけ偶数の要素のみを保持し、結果をリストの中に集積する。

(define (even-fibs n)
  (accumulate
   cons
   nil
   (filter even? (map fib (enumrate-interval 0 n)))))


列操作としての伝達プログラムの価値はこれがモジュラ形式のプログラムデザインを行うことを手助けしてくれることにある。
モジュラであるとは相対的に独立した部品を組み立てることで構築される設計。
柔軟な形でコンポーネントを接続するための慣習的なインタフェースと共に、兵十ンコンポーネントのライブラリを提供することで、
モジュラ設計を推進することができる。


(define (list-fib-squares n)
  (accumulate
   cons
   nil
   (map square (map fib (enumrate-interval 0 n)))))
(list-fib-squares 10)

部品を再配置し、列の奇数の二乗を計算するのに使うことも可能。

(define (product-of-squares-of-odd-elements sequence)
  (accumulate * 1 (map square (filter odd? sequence))))

慣習的なデータ処理アプリケーションを列操作を用いて説明することも出来ます。
個人の記録の列があるとして、最も高給なプログラマの給与を見つけたいとします。
記録の給与を返すセレクタsalaryと記録がプログラマのものであるかを判定するprogrammer?があるとします。

(define (salary-of-highest-paid-programmer raecords)
  (accumulate
   max 0 (map salary (filter programmer? records))))


ここではリストとして実装された列は処理モジュールを接続することを可能にする慣習的インタフェースとしての役割を行う。
その上、私達が構造を列として統一的に表現した時、私たちはプログラムの中のデータ構造依存性を少ない数の列操作へと局所化した。
これらを変更することで、プログラム設計を全体的に保存したまま列の代替的表現方法を試みることができる。


入れ子のmap
列のパラダイムを拡張子、一般的に入れ子ループを用いて表現される多くの演算を含めてみる。
正の整数nを与えられた時、異なる正の整数iとjのすべての順序付けペアを見つけよ。
条件として1 < j < i < nかつi + jは素数である。

この演算を体系化する自然な方法は全ての順序づけられたn以下の正の整数のペアを生成し、フィルタを通してその合計が素数であるもののみを選択し、フィルタを通った各ペア(i, j)に対し、三つ組(i,j,i+j)を生成すること。

ここでペアの列を生成する方法を挙げる。
全ての整数 i< nに対し、整数 j < iを列挙し、全てのそのようなiとjに対し、ペア(i,j)を生成する。
列操作を用いて列(enumerate-interval 1 n)にそってmapを行う。
この列の各iに対し、列(enumrate-interval 1 (- i 1))にそってmapを行う。
この後者の列のjに対し、ペア(list i j)を生成する。
これが全てのiに対するペアの列を与える。
全てのiに対する全ての列を(appendを用いて集積することにより)接続することで要求されたペアの列を生成する。

(accumulate
 append nil (map (lambda (i)
                   (map (lambda (j) (list i j))
                        (enumerate-intrerval i (- i 1))))
                 (enumerate-interval 1 n)))

mapと集積の組み合わせをappendと共に用いるのはこの種のプログラムにおいてとても一般的。
これを分離したプログラムとして分ける。

(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

これでこのペアの列をフィルタにかけ、和が素数であるものを探す。
フィルタの述語が各要素に対して呼ばれる。その引数はペアであり、ペアから整数を抽出せねばならない。
従って、列の各要素に適用される述語は以下のようになる。

(define (prime-sum? pair)
  (prime? (+ (car pair) (cadr pair))))

最後に、フィルタを通ったペア全体に以下の手続きを用いてmapをかけた結果の列を生成する。

(define (make-pair-sum pair)
  (list (car pair) (cadr pair) (+ (car pair) (cadr-pair))))

(define (prime-sum-pairs n)
  (map make-pair-sum
       (filter prime-sum?
               (flatmap
                (lambda (i)
                  (map (lambda (j) (list i j))
                       (enumerate-interval 1 (- i 1))))
                (enumerate-interval 1 n)))))


入れ子のmapは区間を列挙するもの以外に列に対しても便利。
ある集合Sの全ての順列を生成したいとする。つまり集合内の項目の全ての並べ方。
例えば{1,2,3}の順列は{1,2,3}, {1,3,2}, {2,1,3}...
ここに集合Sの順列を静止するための計画を挙げる。
Sの中の全ての項目xに対し再帰的にS-xの順列の列を生成し、次にxをそれぞれの先頭に置く。
これはSの全てのxに対しSのxではじまる順列の列を生成する。
これらの全てのxに対する列を接続するとSの全ての順列が与えられる。

(define (_permutations s)
  (if (null? s)  ; 集合は空か？
      (list nil) ; 空集合を持つ列
      (flatmap (lambda (x)
                 (map (lambda (p) (cons x p))
                      (permutations (remove x s))))
               s)))


(list nil)
これは1要素の列であり、要素無しの集合を表す。

remove
与えられた式から与えられた項目以外の全ての要素を返す。

(define (remove item sequence)
  (filter (lambda (x) (not (= x item)))
          sequence))


