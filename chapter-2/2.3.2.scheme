2.3.2 例: 記号微分

(variable? e)          eは変数であるか？
(same-variable? v1 v2) v1とv2は同じ変数であるか？
(sum? e)               eは和か？
(addend e)             和eの加数
(augend e)             和eの被加数
(make-sum a1 a2)       a1とa2の和
(product? e)           eは積か？
(multiplier e)         積eの乗数
(multiplicand e)       積eの被乗数
(make-product m1 m2)   m1とm2の積を構築する

これらと数値であるかを判断するプリミティブな述語number?を用いて、以下の手続きのように微分のルールを表現できる。

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        ((sum? exp) (make-sum (deriv (addend exp) var)
                              (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicant exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        (else
         (error "unknown expression type: DERIV" exp))))



代数式を表現する
代数式を表現するリスト構造を使用する手法は数多く想像できる。
例えば通常の台数記法を真似する記号のリストを用い、ax+bをリスト(a * x + b)のように表現することもできる。
しかし特に直接的な1つの選択はLispが複合式に用いるのと同じくカッコで括った接頭辞記述法。
つまりax+bは(+ (* a x) b)と表現される。

変数はシンボルである。プリミティブな述語symbol?で判別される。
(define (variable x) (symbol? x))

2つの変数はそれらを表現するシンボルがeq?であるとき同じ
(define (same-variable?) v1 v2
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

和と積はリストとして構築される。
(define (make-sum a1 a2) (list '+ a1 a2))
(define (make-product m1 m2) (list '* m1 m2))

和は最初の要素がシンボル+のリスト
(define (sum? x) (and (pair? x) (eq (car x) '+)))

加数は和のリストの2つ目の項
(define (addend s) (cadr a))

被加数は和のリストの3つの項
(define (augend s) (caddr s))

積は最初の要素がシンボル*のリスト
(define (product? x) (and (pair? x) (eq? (car x) '*)))

乗数は積のリストの2つ目の項
(define (multiplier p) (cadr p))

被乗数はリストの3つ目の項
(define (multiplicant p) (caddr p))

従って記号微分プログラムを得るには、これらをderivにより組み込まれたアルゴリズムを用いて組み立てることのみが必要。

(deriv '(+ x 3) 'x)
(+ 1 0)

(deriv '(* x y) 'x)
(* (* x 0) (* 1 y))

(defiv '(* (* x y) (+ x 3)) 'x)


(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        (else (list '+ a1 a2))))

これには手続き=number?を用いた。式が与えられた数値と等しいかチェックする。
(define (=number? exp num) (and (number? exp) (= exp num)))

