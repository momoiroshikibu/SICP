2.4.3 データ的銃プログラミングと付加性

データの方をチェックし適切な手続きを呼ぶ一般的な戦略はdispatching on type (タイプ別処理)と呼ばれる。
これはシステム設計にお家tモジュール方式を得るための強力な戦略。
一方でSection 2.4.2のような呼び出しのジソすは2つの明らかな弱点が存在する。
1つはジェネリックインタフェース手続き(real-part, imag-part, magnitude, angle)は全ての異なる表現について知っていなければなりません。
例えば複素数に対する新しい表現を複素数システムに組み入れたいとしましょう。
この新しい表現を型にて識別し、次に全てのジェネリックインタフェース手続きに条項を追加し、その表現に対する適切なセレクタを適用する必要が出てくるでしょう。
もうもう1つのこのテクニックの弱点は例え個々の表現が別々に設計できたとしても、システム全体の中でどの2つの手続きも同じ名前を持たないことを保証せねばならない。
これがなぜAとBがSection2.4.1の彼らの元の手続きの名前を変更しなければいけないかの理由でした。
両者の弱点の根底にある問題はジェネリックインタフェースを実装するためのテクニックがadditive(付加的)でないこと。
ジェネリックセレクタ手続きを実装する人はこれらの手続きを新しい表現がインストールされる度に変更せねばならず、また個々の表現を接続する人々は名前衝突が起こらぬように彼らのコードを変更せねばならない。
これらのケースのそれぞれでコードに対して加えられなければならない変更は簡単だが、それでも必ず行わねばならず、不自由さと障害の原因となる。
これは複素数システムに対して現時点ではあまり大きな問題ではない。
しかしただ2つではなく数百もの異なる表現が複素数に対して存在すると仮定してみてください。
その上どのプログラマもインタフェース手続きや全ての表現について知らないと想定してみてください。
問題は現実的であり大規模なデータベース管理システムのようなプログラムでは必ず解決される必要がある。

私たちに必要なものはより一層のシステム設計のモジュール化のための手段。
これはdata-directed programming(データ適従プログラミング)として知られる手法。
異なる型の集合に対して共通なジェネリックな命令の集合を扱う度に、実際に予想される命令を1つの軸に、予想される型をもう一つの軸に持つ二次元の票に取り組み、その観察結果からはじめる。
表の項目には与えられた各引数の型に対する各命令を実装する手続き。
前の章にて開発された複素数システムでは命令の名前、データタイプ、実際の手続きの間の対応はジェネリックなインタフェース手続きの種々の条件節の間に広がっている。
しかし同じ情報が1つのテーブルの中に組み込まれることができたはず。

データ適従プログラミングはそのようなテーブルと直接連携するためのプログラム設計のテクニック。
以前は私たちは複素数演算コードをそれぞれが明示的に型に従う呼び出しを行う手続きの集合としての2つの表現パッケージと接続するメカニズムを実装した。
ここではインタフェースの命令の名前と引数タイプの組み合わせをテーブルの中から調べ適用すべき正しい手続きを見つける単一の手続きとして実装する。
そして次にその手続を引数の中身に対して適用する。
これを行えば、システムに対して新しい表現パッケージの追加するために既存の手続きに何の変更を行う必要もありません。
必要なのは表に新しい項目を追加すること。

