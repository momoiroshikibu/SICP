2.4.3 データ的銃プログラミングと付加性

データの方をチェックし適切な手続きを呼ぶ一般的な戦略はdispatching on type (タイプ別処理)と呼ばれる。
これはシステム設計にお家tモジュール方式を得るための強力な戦略。
一方でSection 2.4.2のような呼び出しのジソすは2つの明らかな弱点が存在する。
1つはジェネリックインタフェース手続き(real-part, imag-part, magnitude, angle)は全ての異なる表現について知っていなければなりません。
例えば複素数に対する新しい表現を複素数システムに組み入れたいとしましょう。
この新しい表現を型にて識別し、次に全てのジェネリックインタフェース手続きに条項を追加し、その表現に対する適切なセレクタを適用する必要が出てくるでしょう。
もうもう1つのこのテクニックの弱点は例え個々の表現が別々に設計できたとしても、システム全体の中でどの2つの手続きも同じ名前を持たないことを保証せねばならない。
これがなぜAとBがSection2.4.1の彼らの元の手続きの名前を変更しなければいけないかの理由でした。
両者の弱点の根底にある問題はジェネリックインタフェースを実装するためのテクニックがadditive(付加的)でないこと。
ジェネリックセレクタ手続きを実装する人はこれらの手続きを新しい表現がインストールされる度に変更せねばならず、また個々の表現を接続する人々は名前衝突が起こらぬように彼らのコードを変更せねばならない。
これらのケースのそれぞれでコードに対して加えられなければならない変更は簡単だが、それでも必ず行わねばならず、不自由さと障害の原因となる。
これは複素数システムに対して現時点ではあまり大きな問題ではない。
しかしただ2つではなく数百もの異なる表現が複素数に対して存在すると仮定してみてください。
その上どのプログラマもインタフェース手続きや全ての表現について知らないと想定してみてください。
問題は現実的であり大規模なデータベース管理システムのようなプログラムでは必ず解決される必要がある。

私たちに必要なものはより一層のシステム設計のモジュール化のための手段。
これはdata-directed programming(データ適従プログラミング)として知られる手法。
異なる型の集合に対して共通なジェネリックな命令の集合を扱う度に、実際に予想される命令を1つの軸に、予想される型をもう一つの軸に持つ二次元の票に取り組み、その観察結果からはじめる。
表の項目には与えられた各引数の型に対する各命令を実装する手続き。
前の章にて開発された複素数システムでは命令の名前、データタイプ、実際の手続きの間の対応はジェネリックなインタフェース手続きの種々の条件節の間に広がっている。
しかし同じ情報が1つのテーブルの中に組み込まれることができたはず。

データ適従プログラミングはそのようなテーブルと直接連携するためのプログラム設計のテクニック。
以前は私たちは複素数演算コードをそれぞれが明示的に型に従う呼び出しを行う手続きの集合としての2つの表現パッケージと接続するメカニズムを実装した。
ここではインタフェースの命令の名前と引数タイプの組み合わせをテーブルの中から調べ適用すべき正しい手続きを見つける単一の手続きとして実装する。
そして次にその手続を引数の中身に対して適用する。
これを行えば、システムに対して新しい表現パッケージの追加するために既存の手続きに何の変更を行う必要もありません。
必要なのは表に新しい項目を追加すること。

この計画を実装するために、2つの手続きputとgetを命令と型のテーブルを操作するために持っていると仮定します。

(put <op> <type> <item>)は<item>をテーブルに挿入し、<op>と<type>で索引付けられる。

(get <op> <type>)は<op>, <type>の項目をテーブルから探し、見つかった項目を返す。
もし見つからない場合にはgetはfalseを返す。

(define (install-rectangular-package)
  ;; internal procedures
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z)
    (sqrt (+ (square (real-part z))
             (square (imag-part z)))))
  (define (angle z)
    (atan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a)
    (cons (* r (cos a)) (* r (sin a))))

  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)


この中の内部手続はSection2.4.1にて分離を行った時に彼が書いたものと同じ手続きであることに注意。
これらをシステムの残りに接続するためにはまったく変更がありません。
さらにこれらの手続きの定義はインストールを行う手続きの内部であるため、パッケージ外部の他の手続きに対して
名前の衝突が起こることを全く心配する必要がない。
これらをシステムの残りに対し接続するために、real-part手続きを命令名real-partと型(rectangular)の元にインストールした。
そして他のセレクタに対しても同様に行った。
このインタフェースはまた外部システムにより利用されるコンストラクタも定義する。
ただしタグを不可することが異なる。


複素数演算のセレクタはapply-genericと呼ばれる普遍的な"operation"手続きを用いてテーブルにアクセスする。
これはジェネリックな命令を引き数に対して適用する。
apply-genericは命令の名前と引き数の型の下に表を調べ結果としての手続きがあれば適用する。
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (error
           "No method for these types: APPLY-GENERIC"
           (list op type-tags))))))

apply-genericを用いることで、以下のようにセレクタを定義できる。

(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle z))

もし新しい表現がシステムに追加されたとしてもこれらが全く変更されないことに注意。
またテーブルからコンストラクタを抽出することもできる。
コンストラクタはパッケージ外部プログラムにより使用でき、実数部と虚数部が大きさと角度から複素数を作る。

(define (make-from-real-imag x y)
  ((get 'make-from-real-imag 'rectangular) x y))
(define (make-from-mag-ang r a)
  ((get 'make-from-mag-ang 'polar r a)))



メッセージパッシング
データ適従プログラミングの鍵となる考えは、プログラム中のジェネリックな命令をFigure 2.22のような命令と型のテーブルを明示的に処理することで扱うこと。
Section 2.4.2で用いたプログラミングスタイルは要求された型に基づく呼び出しを各命令がそれ自身の呼び出しの世話を行うことで組織化した。実際にこれは命令と型のテーブルを、テーブルの行を表す各ジェネリックな操作手続きを用いて行に分解する。
抱いていた気な実装戦略はテーブルを列に分解し、データ型に基づき呼び出しを行う知的な命令を用いる代わりに、命令名に基づき呼び出しを行う知的なデータオブジェクトを用いて動かすもの。
ちょっこ形式の複素数のようなデータオブジェクトが入力として必要な命令名を取り指定された命令を実行するように準備を行うことができる。
そのような規律の下ではmake-from-real-imagは以下のように書くことができる。

(define (make-from-real-imag x y)
  (define (dispatch op)
    (cond ((eq? op 'real-part) x)
          ((eq? op 'imag-part) y)
          ((eq? op 'magnitude)
           (sort (* (square x) (square y))))
          ((eq? op 'angle) (atan y x))
          (else error "Unknown op:
                       MAKE-FROM-REAL-IMAG" op)))
  dispatch)

対応するapply-generic手続きはジェネリックな命令を引数に適用しますが、ここでは単純に命令の名前をデータオブジェクトに与えオブジェクトに仕事を行わせる。

(define (apply-generic op arg) (arg op))

make-from-real-imagにより返される値は手続き - 内部手続dispatchであることに注意。
これがapply-genericが命令に実行を要求したときに起動される手続き。
このプログラミングスタイルはmessage passingと呼ばれる。
その名前はデータオブジェクトが要求された命令の名前をメッセージとして受け取った要素であるというイメージから来ている。
私たちはすでにメッセージパッシングの例をSection2.1.3にて見ている。
その時はcons, car, cdrがデータオブジェクト無し、手続きのみでどのように定義され得るかを学びました。
ここではメッセージパッシングは数学上のトリックではなくジェネリック命令を用いてシステムを構造化するのに便利なテクニックであることを学びます。

