2.5.3 例: 記号代数
記号代数表現の操作は巨大なスケールのシステムの設計において起こりえる最も困難な問題の多くを説明する複雑な処理。
代数表現は一般的に階層構造であると見ることができ、演算子の木がオペランドに適用される。
代数表現を定数と変数のようなプリミティブなオブジェクトの集合からはじめて、これらを加算や乗算のような代数演算子を用いて接続することで構築できる。
他の言語と同様に、複合オブジェクトに単純な用語で参照することを可能にするための抽象化を形式化する。
典型的な記号代数における抽象化は線形結合、多項式、有理関数、三角関数のような考え。
これらの式を処理の方向付けするのによく便利である場合、複合型と見なすことが出来る。

x^2sin(y^2 + 1) + xcos2y + cos(y^3 - 2y^2)

係数を伴うxの多項式と係数が整数であるyの三角関数として記述することができる。


多項式の計算
多項式上の数値演算を実行するシステムの設計における最初のタスクは多項式とは何かを決定すること。
多項式は通常いくつかの変数(多項式のindeterminates(不定元))に関連して定義される。
簡単にするために多項式は但し凸の不定元(univariate polynomials(位置変数多項式))に制約する。
多項式とは項の和であり、各項は係数、不定元の累乗数、または係数と不定元の累乗数の積であると定義する。
係数は多項式の不定元に依存しない代数表現であると定義する。
たとえば、

5x^2 + 3x + 7

は簡単なxの多項式であり、

(y^2 + 1)x^3 + (2y)x + 1

は係数がyの多項式であるxの多項式

私達のシステムの設計はデータ抽象化にて馴染みのある規律に従うことで取り組む。
多項式をpolyと呼ぶ新しいデータ構造を用いて表現する。
polyは変数と項の係数により構成される。
polyからそれらの部分を抽出するセレクタvariableとterm-listと与えられた変数と項のリストからpolyを組み上げるコンストラクタmake-polyがすでにあると仮定します。
変数はただのシンボルであり、same-variable?の手続きを用いて変数の比較が可能。

(define (add-poly p1 p2)
  (if (same-variable? (variable p1) (variable p2))
      (make-poly (variable p1)
                 (add-terms (term-list p1)
                            (term-list p2)))
      (error "Polys not in same var: ADD-POLY"
             (list p1 p2))))

(define (mul-poly p1 p2)
  (if (same-variable? (variable p1) (variable p2))
      (make-poly (variable p1)
                 (mul-terms (term-list p1)
                            (term-list p2)))
      (error "Polys not in same var: MUL-POLY"
             (list p1 p2))))


多項式を私達の数値演算システムに込みこむにはそれらをタイプタグと共に提供する必要がある。
タグpolynomialを用いることにし、タグ付き多項式上の適切な命令を命令テーブルにインストールする。


(define (install-polynomial-package)
  ;; 内部手続
  ;; polyの表現
  (define (make-poly variable term-list)
    (cons variable term-list))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))

  ;; 項t項のリストの兵衛gん
  <procedures adjoin-term coeff from text blow>

  (define (add-poly p1 p2)
    <add-polyで使用される手続き>)
  (define (mul-poly p1 p2)
    <mul-polyで使用される手続き>)

  ;; システムの残りへのインタフェース
  (define (tag p) (attach-tag 'polynomial p))
  (put 'add '(polynomial polynomial)
       (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'mul '(polynomial polynomial)
       (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put 'make 'polynomial
       (lambda (var terms)
         (tag (make-poly var terms))))
  'done)

多項式の加算は項別に実行される。
同じ次数の項(つまり同じ指数の不定元)が合成されねばならない。
項のリストを操作するために、空の項リストを返すコンストラクタthe-empty-termlistと新しい項を項リストに挿入するコンストラクタadjoin-termを既に持っていると仮定します。
また与えられた項リストがからであるか判断する述語empty-termlist?と項リストから最大次数の項を抽出するセレクタfirst-term、西大次数の項を除く全てを返すセレクタrest-termsもまた持っていると仮定する。

以下は2つの多項式の和のために項リストを構築する手続き
(define (add-terms L1 L2)
  (cond ((empty-termlist? L1) L2)
        ((empty-termlist? L2) L1)
        (else
         (let ((t1 (first-term L1))
               (t2 (first-term L2)))
           (cond ((> (order t1) (order t2))
                  (adjoin-term
                   t1 (add-terms (rest-terms L1) L2)))
                 ((< (order t1) (order t2))
                  (adjoin-term
                   t2 (add-terms L1 (rest-terms L2))))
                 (else
                  (adjoin-term
                   (make-term (order t1)
                              (add (coeff t1) (coeff t2)))
                   (add-terms (rest-terms L1)
                              (rest-terms L2))))))))

項リストの表現
項リストは実際には項の次数をキーにした係数の集合。従って、任意の集合表現の手法がこのタスクに適用可能。
add-termsとmul-termsは常に高い次元から低い次元へと連続して項リストを常にアクセスする。
従って何かの順序月リスト表現を用いる。
項リストを表現するリストをどのように構造化すべきか。
1つの考慮点は操作しようとする多項式の濃度。
多項式は多くの次数に関して0でない係数を持つ場合dense(密)と呼ばれる。
もし多くの0の項を保つ場合にはsparse(疎)と呼ばれる。

密多項式
x^5 + 2x^4 + 3x^2 - 2x - 5

疎多項式
x^100 + 2x^2 + 1

密多項式の項リストは係数のリストとして最も効率よく表現される。
例えば上のAは(1 2 0 3 -2 -5)としてうまく表される。
この表現の項の次数はその工の係数で始まるサブリストの長さから1を引いた数。
これはBのような多項式にはひどい表現になり得る。
少なく孤立した非ゼロな項により中断される巨大なゼロのリストになる。
疎多項式のより適切な項リストの表現は各項が項の次数とその次数に対する係数を含むリストである非ゼロ項のリスト。
そのような仕組みではBは効率的に((100 1) (2 2) (0 1))として表現される
多くの多項式操作が疎多項式上にて実行されるため、こちらの手法を用いる。
項リストは項のリストとして表現され、高から低へと並べられる。
これを決定すれば項と項リストに対するセレクタとコンストラクタの実装は簡単。


(define (adjoin-term term term-list)
  (if (=zero? coeff term)
      (term-list)
      (cons term term-list)))

(define (the-empty-termlist) '())
(define (first-term term-list) (car term-list))
(define (rest-terms term-list) (cdr term-list))
(define (empty-termlist?) (null? term-list))

(define (make-term order coeff) (list order coef))
(define (order term) (car term))
(define (coeff term) (cdr term))

多項式パッケージのユーザーはタグ付き多項式を以下の手続きで作成する。
(define (make-polynomial var terms)
  ((get 'make 'polynomial) var terms))

