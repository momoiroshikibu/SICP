2.5.3 例: 記号代数
記号代数表現の操作は巨大なスケールのシステムの設計において起こりえる最も困難な問題の多くを説明する複雑な処理。
代数表現は一般的に階層構造であると見ることができ、演算子の木がオペランドに適用される。
代数表現を定数と変数のようなプリミティブなオブジェクトの集合からはじめて、これらを加算や乗算のような代数演算子を用いて接続することで構築できる。
他の言語と同様に、複合オブジェクトに単純な用語で参照することを可能にするための抽象化を形式化する。
典型的な記号代数における抽象化は線形結合、多項式、有理関数、三角関数のような考え。
これらの式を処理の方向付けするのによく便利である場合、複合型と見なすことが出来る。

x^2sin(y^2 + 1) + xcos2y + cos(y^3 - 2y^2)

係数を伴うxの多項式と係数が整数であるyの三角関数として記述することができる。


多項式の計算
多項式上の数値演算を実行するシステムの設計における最初のタスクは多項式とは何かを決定すること。
多項式は通常いくつかの変数(多項式のindeterminates(不定元))に関連して定義される。
簡単にするために多項式は但し凸の不定元(univariate polynomials(位置変数多項式))に制約する。
多項式とは項の和であり、各項は係数、不定元の累乗数、または係数と不定元の累乗数の積であると定義する。
係数は多項式の不定元に依存しない代数表現であると定義する。
たとえば、

5x^2 + 3x + 7

は簡単なxの多項式であり、

(y^2 + 1)x^3 + (2y)x + 1

は係数がyの多項式であるxの多項式

私達のシステムの設計はデータ抽象化にて馴染みのある規律に従うことで取り組む。
多項式をpolyと呼ぶ新しいデータ構造を用いて表現する。
polyは変数と項の係数により構成される。
polyからそれらの部分を抽出するセレクタvariableとterm-listと与えられた変数と項のリストからpolyを組み上げるコンストラクタmake-polyがすでにあると仮定します。
変数はただのシンボルであり、same-variable?の手続きを用いて変数の比較が可能。

(define (add-poly p1 p2)
  (if (same-variable? (variable p1) (variable p2))
      (make-poly (variable p1)
                 (add-terms (term-list p1)
                            (term-list p2)))
      (error "Polys not in same var: ADD-POLY"
             (list p1 p2))))

(define (mul-poly p1 p2)
  (if (same-variable? (variable p1) (variable p2))
      (make-poly (variable p1)
                 (mul-terms (term-list p1)
                            (term-list p2)))
      (error "Polys not in same var: MUL-POLY"
             (list p1 p2))))
