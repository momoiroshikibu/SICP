3.1.2 代入導入の利点

システムをローカルな状態を持つオブジェクトの集合として見ることはモジュラな設計を維持するための強力なテクニック。


(define rand (let ((x random-init))
               (lambda ()
                 (set! x (rand-update x)))
               x))


(define (estimate-pi trials)
  (sqrt (/ 6 (monte-carlo trials cesaro-test))))
(define (cesaro-test)
  (= (gcd (rand) (rand)) 1))

(define (monte-carlo trials experiment)
  (define (iteer trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1)
                 (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1)
                 trials-passed))))
  (iter trials 0))

randの代わりにrand-updateを用いてやってみる。
局所状態をモデル化するために代入を用いない場合に続行を強制される手法。

(define (estimmate-pi trials)
  (sqrt (/ 6 (random-gcd-test trials initial-x))))

(define (random-gcd-test trials initial-x)
  (define (iteer trials-remaining trials-passed x)
    (let ((x1 (rand-update x)))
      (let ((x2 (rand-update x1)))
        (cond ((= trials-remaining 0)
               (/ trials-passed trials))
              ((= (gcd x1 x2) 1)
               (iter (- trials-remaining 1)
                     (+ trials-passed 1)
                     x2))
              (else
               (iteer (- trials-remaining 1)
                      trials-passed
                      x2))))))
  (iter trials 0 initial-x))
