3.2 評価の環境モデル

一旦代入を私達のプログラミング言語で認めれば、そのような定義はもはや適切ではありません。
代入の出現により、変数はもはや単に値に対する名前であると考えることができない。
そうでなく、変数はどうにかして値が格納できる場所を指定することになる。
私達の新しい評価モデルではこれらの場所はenvironments(環境)と呼ばれる構造に保存される。

環境はframes(フレーム)の列。書くフレームはbindings(束縛)の(空の可能性のある)テーブルで、変数名とそれらが早退する値とを結びつける。
(単一のフレームは任意の変数に対してたかだか1つの束縛を保持する。)
各フレームはまた議論の目的のためにフレームがglobalだと認識されないかぎり、enclosing environment(外部環境)へのポインタを持つ。

環境に対してvalue of a variable(変数の値)はその変数に対する束縛を持つ環境内の最初のフレーム内の束縛により与えられる値。
もし列内のすべてのフレームがその変数に対する束縛を指定子ない場合、その変数はその環境にunbound(束縛されない)と呼ばれる。

環境は評価プロセスに対し不可欠な存在。式が評価されるべきコンテキストを決定するため。
実際にプログラミング言語の式、それ自身は意味を持たないと言えるでしょう。そうでなく、式はそれが評価されるある環境に対してのみ意味を獲得する。
(+ 1 1)のような簡単な式の逐次実行でさえ、+が加算のためのシンボルであるというコンテキストのなかで操作しているという合意に依存している。
従って私達の評価モデルにおいて私たちは常にある環境に対して式を評価すると述べる。
インタプリタとの相互作用を説明するために、単一のフレームから成り立ち(外部環境を持たず)、プリミティブな手続きに関連するシステムの値を持つグローバル環境が存在すると仮定する。
例えば+が加算に対するシンボルであるという考えは、シンボル+がグローバル環境においてプリミティブな加算手続きに対し束縛されていると言うことで捉えられる。
