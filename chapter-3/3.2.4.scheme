3.2.4 内部定義

(define (sqrt x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))

さて環境モデルを用いてなぜこれらの内部定義が希望通りに振る舞うのかを調べることができる。
sqrtはグローバル環境におけるシンボルであり、手続きオブジェクトに束縛され、その関連する環境はグローバル環境。
sqrtが呼ばれた時、新しい環境E1が形成されグローバル環境の下位におかれ、その中ではパラメータxが2に束縛される。
sqrtのボディが次にE1の中で評価される。
sqrtのボディの最初の式は以下であり、

(define (good-enough? guess)
  (< (abs (- (square guess) x)) 0.001))

この式を評価すると手続きgood-enough?が環境E1の中に定義される。
具体的には、シンボルgood-enough?がE1の最初のフレームに追加され、環境E1を指す手続きオブジェクトに束縛される。
同様にimproveとsqrt-iterがE1の中に手続きとして定義される。
ローカル手続きが定義された後に、式(sqrt-iter 1.0)がまた環境E1の中で評価される。
そのためE1の中でsqrt-iterに束縛された手続きオブジェクトが引数1にて補バレる。
これが環境E2を作成しsqrt-iterのパラメータであるguessが1に束縛される。
sqrt-iterは次にgood-enough?を(E2の)guessの値を引数として呼ぶ。
これが別の環境E3を構築し(good-enough?の引数である)guessが1に束縛される。
sqrt-iterとgood-enough?の両方がguessという名前のパラメータを持つが、2つの区別可能なローカル変数が異なるフレームの中に存在する。
またE2とE3の両方がE1を外部環境として持つ。
手続きsqrt-iterとgood-enough?の両方がE1をそれらの環境部分として持つため。
これの結果の1つのとしてgood-enough?のボディ内のシンボルxはE1内に存在するxの束縛を参照する。
すなわち元のsqrt手続きが呼ばれた時のxの値。

・ローカル手続きの名前は(直の)外部手続きの外側の名前と衝突しない。
ローカル手続きの名前は手続きが実行される時に作成したフレーム内にて束縛されるのであり、グローバル環境内で束縛されるわけではない。
・ローカルな手続きはそれを内包する外部手続きの引数にアクセスすることができる。単純にパラメータの名前を自由変数として用いるだけ。これはローカル手続きのボディは外部手続きのための評価環境の下位に置かれる環境内で評価されるため。
