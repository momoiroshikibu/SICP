3.3.1 ミュータブルなリスト構造

ペアのプリミティブなミューテータはset-car!とset-cdr!です。
set-car!は2つの引数を取り、第一引数はペアでなければならない。
このペアのcarポインタをset-car!の第二引数へのポインタで置き換えることでペアを変更する。

cdt-cdr!はset-acr!と同様。carポインタではなくcdrポインタが置き換えられることが違い。

consは新しいリスト構造を新しいペアを作成することで構築する。
一方、set-car!とset-cdr!は既存のペアを変更する。
実際に2つのミューテータと既存のリスト構造の一部ではない新しいペアを返すget-new-pairを一緒に用いてconsを実装することができる。

(define (cons x y)
  (let ((new (get-new-pair)))
    (set-car! new x)
    (set-car! new y)
    new))


共有と自己同一性

(define x (list 'a 'b))
(define z1 (cons x x))

z1はそのcarとcdrの両者が同じペアxを指している。
このz1のcarとcdrによるxの共有はconsが直接的な方法で実装されていることによる結果。
一般的にconsを用いてリストを構築することは多くの個別のペアが多くの異なる構造において共有される、ペアの連結構造に帰着する。

(define z2 (cons (list 'a 'b) (list 'a 'b)))

この構造においては、2つの(a b)リスト内のペアは実際のシンボルが共有されていても区別可能。
リストとして考えた時、z1とz2の両方が同じリスト((a b) a b)を表現する。
一般的に共有はリスト上で用いる命令がcons, car , cdrだけならば完全に検出不可能。
しかしリスト構造上で変更を許可するのであれば、共有に気づくことができる。
共有が作成できる違いの例として、適用された引数の構造のcarを変更する以下の手続きについて考えてみましょう。

(define (set-to-wow! x) (set-car! (car x) 'wow) x)

例えz1とz2が同じ構造だとしても、set-to-wow!をそれらに適用すると異なる結果を返す。
z1ではcarの変更はcdrも変更する。
z1ではcarとcdrが同じペアであるため。
z2ではcarとcdrは区別可能なので、set-to-wow!はcarのみを変更する。

リスト構造中の共有を見つけるひとつの方法は2つのシンボルが等しいかテストする方法として紹介した述語eq?を用いる。
より一般的には(eq? x y)はxとyが同じオブジェクトであるかどうかをテストする。
(これはつまり、xとyはポインタとして等しいか)
ペアで表現可能なデータ構造のレパートリーを大きく拡張することが共有を用いて可能。
一方で、共有はまた危険であり構造に対して行われる変更がたまたま部品を共有する他の構造に対しても影響を与える。
ミューテータであるset-car!とset-cdr!は注意深く利用せねばならない。
データオブジェクトがどのように共有されているかをよく理解しなければ変更は予期しない結果を引き起こす。
