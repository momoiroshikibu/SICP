3.3.2 キューの表現

ミューテータのset-car!とset-cdr!はペアを用いて
cons, car, cdrのみでは不可能なデータ構造を構築可能。
この説ではキュート呼ばれるデータ構造を表現するためにどのようにペアを用いるかについて示す。
queur(キュー)はアイテムが一方の橋(キューのrear(リア、終端))に挿入され、他方の端(front)から削除される列。
アイテムは常に挿入順に削除されるためキューは時々FIFO(first in, first out)バッファと呼ばれる。

データの抽象化の観点ではキューを以下の操作の集合であると見なすことができる。

コンストラクタ:
(make-queue)は空のキュー(アイテムを全く持たないキュー)を返す

2つのセレクタ
(empty-queue? <queue>)
キューが空であるかテストする
(front-queue <queue>)

キューの先頭のオブジェクトを返す。
もしキューが空ならエラーを発する。キューを変更しない。

2つのミューテータ
(insert-queue! <queue> <item>)
キューの最後尾にアイテムを挿入し、変更されたキューをその値として返す。

(delete-queue! <queue>)
キューの先頭のアイテムを削除し、その値として変更されたキューを返す。
もしキューが削除前に空であればエラーを発する。

キューはアイテムの列であるため確かに順序有りリストであると表現できる。
キューの先頭はリストのcarであり、キューにアイテムを挿入するのは新しい要素をリストの最後に追加することで、
キューからのアイテムの削除はただリストのcdrを得ることと言える。
しかしこの表現は非効率。なぜならアイテムを挿入するためにはリストを終端まで走査しなければならない。
リストの走査のための手段はcdr命令を連続して用いるしか無く、この走査はnアイテムのリストに対しθ(n)ステップを必要とする。
リスト表現に対する簡単な変更がこの欠点を克服しθ(1)ステップを必要とするキュー命令の実装を可能にする。
これはつまり、必要なステップ数がキューの長さから独立するということ。

リスト表現による困難はリストの終端を見つけるための走査が必要である点から生じている。
走査が必要な理由はリストをペアの鎖として表現する標準的方法が、事前にリストの先頭へのポインタを提供するのに対し、終端を指す簡単にアクセス可能なポインタを提供しないため。
欠点を避けるための変更としてキューをリストとしながらリストの最終ペアを示す追加のポインタをも用いて表現する。
この方法ではアイテムを挿入する場合に終端ポインタを調べることでリストの走査を避けることが出来る。
するとキューはポインタのペア、front-ptrとrear-ptrとして表現される。
それぞれが通常のリストの先頭と最後のペアを指す。キューを識別可能なオブジェクトにするために2つのポインタを接続するのにconsを用いる。
従ってキューそれ自身が2つのポインタのconsになる。
キューの命令を定義するために以下の手続きを用いる。
これはキューの先端と終端のポインタの選択、変更を可能にする。

(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))

これで実際のキューの命令を実装できる。
もし先端のポインタが空リストならばキューは空であると考えることにする。

(define (empty-queue? queue) (null? (front-ptr queue)))

make-queueコンストラクタは初期値として空キューを意味するcarとcdrの両方が空のリストのペアを返す。
(define (make-queue (cons '() '())))

キューの頭のアイテムを選択するために先端ポインタが指すペアのcarを返す。

(define front-queue queue
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue")
      (car (front-ptr queue))))

キューにアイテムを挿入する。最初にcarが挿入するアイテムでありcdrが空リストである新しいペアを作成する。
もしキューがからであるなら先端と終端のポインタにこの新しいペアを設定する。
そうでなければキューの最終ペアを新しいペアをサスように変更し、また終端ポインタを新しいペアを指すようにする。

(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))


キューの頭のアイテムを削除するために、ただ単に先端ポインタを変更しキューの2つ目のアイテムを指すようにする。
これは最初のアイテムのcdrポインタに従うだけで見つけられる。

(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
         (set-front-ptr! queue (cdr (front-ptr queue)))
         queue)))
