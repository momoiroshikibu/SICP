3.3.3 テーブルの表現

一次元の表について考える。各値が単一のキーの下に格納される。
テーブルをレコードのリストとして実装し、各レコードはキーと関連する値からなるペアとして実装する。
レコードはcarが次のレコードを指すペアによりリストを形成するように連結される。
これらn連結されたペアは表のbackboneと呼ばれる。
テーブルに新しいレコードを追加する時に変更可能な場所を得るために、テーブルをheaded listとして構築する。
頭出しリストは特別なバックボーンペアを最初に持つ。
これはダミーのレコード、今回の場合、自由裁量で選択したシンボル*table*を持つ。

a: 1
b: 2
c: 3

テーブルから情報を抽出するには鍵を引数として取り相対する値(またはそのキーの下に値が格納されていない場合にはfalse)を返すlookup手続きを用いる。
lookupはキーとレコードのリストを引数として期待するassoc命令を用いて定義する。
assocがダミーレコードを絶対に参照しないことに注意。
assocは与えられたキーをcarとして持つレコードを返す。
するとlookupはassocが返した結果のレコードがfalseでないかをチェックし、そのレコードの値(cdr)を返す。

(define (lookup key table)
  (let ((record (assoc key (cdr table))))
    (if record
        (cdr record)
        false)))

(define (assoc key records)
  (cond ((null? records) false)
        ((equal? key (caar records)) (car records))
        (else (assoc key (cdr recordds)))))

値をテーブルに指定したキーの下に挿入するために、最初にassocを用いて既にテーブルの中にキーを持つレコードが存在しないか確認する。
もし無ければ鍵と値をconsすることで新しいレコードを作成しこれをテーブルのレコードリストの先頭のダミーレコードの後ろに挿入する。
もし既にこのキーのレコードが存在する場合にはそのレコードのcdrに新しい値を設定する。
テーブルのヘッダは新しいレコードを挿入するために変更する固定位置を与える。

(define (insert! key value table)
  (let ((record (assoc key (cdr table))))
    (if record
        (set-cdr! record value)
        (set-cdr! table
                  (cons (cons key value)
                        (cdr table)))))
  'ok)

新しいテーブルを構築するためにはシンボル*table*を持つリストを作成する。

(define (make-table)
  (list '*table*))


二次元テーブル
二次元テーブルでは各値は2つのキーにより索引付けられます。
そのようなテーブルを各キーが部分テーブルを構築する1次元テーブルとして構築することができます。

math:    +: 43
         -: 45
         *: 42

letters: a: 97
         b: 98

これは2つ部分テーブルを持ちます。
部分テーブルは特別なヘッダシンボルを必要としません。
部分テーブルを特定するキーがこの目的を果たすためです。
アイテムを探す時、最初のキーを用いて正しい部分テーブルを特定します。
次にふたつ目のキーを用いて部分テーブルの中のレコードを特定します。

(define (lookup key-1 key-2 table)
  (let ((subtable
         (assoc key-1 (cdr table))))
    (if subtable
        (let ((record
               (assoc keyt-2 (cdr subtable))))
          (if record
              (cdr record)
              false))
        false)))

キーのペアの下に新しいアイテムを挿入するにはassocを用いて最初のキーの下に部分テーブルが存在するかどうかを確認します。
もし無ければ単一のレコード(key-2, value)を含む新しい部分テーブルを構築し、それを最初のキーの下のテーブルに挿入します。
もし最初のキーに対する部分テーブルが既に存在する場合、新しいレコードをこの部分テーブルに先に説明した一次元テーブルに対する挿入方法を用いて挿入します。

(define (insert! key-1 key-2 value table)
  (let ((subtable (assoc key-1 (cdr table))))
    (if subtable
        (let ((record (assoc key-2 (cdr subtable))))
          (if record
              (set-cdr! record value)
              (set-cdr! subtable
                        (cons (cons key-2 value)
                              (cdr subtable)))))
        (set-cdr! table
                  (cons (list key-1
                              (cons key-2 value))
                        (cdr table)))))
  'ok)


ローカルなテーブルの作成
上で定義されたlookupとinsert!命令はテーブルを引数として取る。
これが複数のテーブルにアクセスするプログラムを許可する。
複数のテーブルを扱う他の方法には各テーブルに対し分離されたlookupとinsert!手続きを持つ方法がある。
これはテーブルを手続き的に、その局所状態の一部に内部テーブルを持つオブジェクトとして表現することにより可能になる。
適切なメッセージを送った時に、このテーブルオブジェクトは内部テーブルを操作する手続きを適用する。
以下にこの様式で表現された二次元テーブルのためのジェネレータを示す。


(define (make-table)
  (let ((local-table (list '*table*)))
    (define (lookup key-1 key-2)
      (let ((subtable
             (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record
                   (assoc key-2 (cdr subtable))))
              (if record (cdr record) false))
            false)))
    (define (insert! key-1 key-2 value)
      (let ((subtable
             (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record
                   (assoc key-2 (cdr subtable))))
              (if record
                  (set-cdr! record value)
                  (set-cdr! subtable
                            (cons (cons key-2 value)
                                  (cdr subtable)))))
            (set-cdr! local-table
                      (cons (list key-1 (cons key-2 value))
                            (cdr local-table)))))
      'ok)
    (define (dispatch m)
      (cons ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation: TABLE" m))))
    dispatch))

make-tableを用いることでデータ適従プログラミングのためのgetとputを以下のように実装可能。

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))

getは引数として2つのキーを取り、putは引数として2つのキーと値を取る。
両方の命令ともに同じ局所テーブルをアクセスする。
局所テーブルはmake-tableの呼び出しにより作成されたオブジェクトの中にカプセル化される。

