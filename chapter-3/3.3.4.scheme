3.3.4 デジタル回路のシミュレータ

(define a (make-wire))
(define b (make-wire))
(define c (make-wire))
(define d (make-wire))
(define e (make-wire))
(define s (make-wire))

ある関数箱を回路の集合に対してその種類の箱を構築する手つきを呼ぶことにより取り付けることができます。
コンストラクタ手続きへの引数は箱に取り付けられる回路。
例えばANDゲート、ORゲート、逆変換器を構築出来る場合、半加算器を配線することができる。

(or-gate a b d)
ok
(and-gate a b c)
ok
(inverter c e)
ok
(and-gate d e s)
ok

もっと良いことには、半加算器に取り付けられる4つの外部回路を与えられた時、
この回路を構築する手続きhalf-adderを定義することでこの操作に明示的に名前をつけることができる。

(define (half-adder a b s c)
  (let ((d (make-wire) (e (make-wire)))
        (or-gate a b d)
        (and-gate a b c)
        (inverter c e)
        (and-gate d e s)
        'ok)))

この定義を作ることの利点はhalf-adderそれ自身をより複雑な回路を作成するときに建築用ブロックとして使用することができること。

(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire)) (c1 (make-wire)) (c2 (make-wire)))
    (half-adder b c-in s c1)
    (hald-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))

プリミティブな関数箱
ある回路上の信号の変化が他の配線上の信号に影響を与える力を実装する。

(get-signal <wire>)
回線上の信号の現在地を返す

(set-signal! <wire> <new value>)
回路上の信号の値を新しい値に変更する

(add-action! <wire> <procedure of no arguments>)
指定された手続きが回路上の信号が値を変化した場合常に実行されるように宣言する。
そのような手続きは、回路上の信号の値の変化が他の回路と通信を行うための伝達手段。

さらに手続きafter-delayを使用し遅延時間と実行される手続きを取得し、与えられた手続きを遅延時間後に実行します。
これらの手続きを用いてプリミティブなデジタル論理関数を定義できる。
入力を逆変換機を通して出力に接続するためにadd-action!を用いて入力回路と入力回路上の信号が値をヘンカするたびに実行される手続きを関連付ける。
その手続は入力信号のlogical-not(論理否定)を計算し、そしてinverter-delay後に出力信号にこの新しい値を設定する。

(define (inverter input output)
  (define (invert-input)
    (let ((new-value (logical-not (get-signal input))))
      (after-delay inverter-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! input invert-input 'ok)
  (define (logical-not s)
    (cond ((= s 0) 1)
          ((= s 1) 0)
          (else (error "Invalid signal" s)))))

ANDゲートはより少しだけ複雑。アクション手続きはゲートへの入力のどちらかが変化した場合に実行されなければならない。
それが入力回路上の信号の値のlogical-and(論理積)をlogical-notと類似の手続きを用いて求め、出力回路上に起こる新しい値への変更をand-gate-delay後に設定する。

(define (and-gate a1 a2 output)
  (define (and-action-procedure)
    (let ((new-value
           (logical-and (get-signal a1) (get-signal a2))))
      (after-delay
       and-gate-delay
       (lambda () (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure)
  'ok)


回路の表現
wireは2つのローカルな状態変数を持つ計算オブジェクトになる。
その2つはsignal-value(信号値(初期値は0))と信号が値を変えた時に実行されるaction-procedures(行動手続き)の集合。
メッセージパッシングスタイルを用いてワイヤを局所手続きの集合として適切な局所命令を選択する手続きdispatchとともに実装する。

(define (make-wire)
  (let ((signal-value 0) (action-procedures '()))
    (define (set-my-signal! new-value)
      (if (not (= signal-value new-value))
          (begin (set! signal-value new-value)
                 (call-each action-procedures))
          'done))
    (define (accept-action-procedure! proc)
      (set! action-procedures
            (cons proc action-procedures))
      (proc))
    (define (dispatch m)
      (cond ((eq? m 'get-signal) signal-value)
            ((eq? m 'set-signal!) set-my-signal!)
            ((eq? m 'add-action) accept-action-procedure!)
            (else (error "Unknown operation: WIRE" m))))
    dispatch))

局所手続きset-my-signal!は新しい信号値が配線上の信号を変えるかチェックします。
もしそうであればすべての行動手続きを以下の手続きcall-eachを用いて実行します。
call-eachは引数なし手続きのリスト内のすべてのアイテムを呼び出します。

(define (call-each procedures)
  (if (null? procedures)
      'done
      (begin ((car procedures))
             (call-each (cdr procedures)))))

局所手続きaccept-action-procedure!は与えられた手続きを実行対象手続きリストに追加します。
次に新しい手続きを一度実行します。
ローカルのdispatch手続きが指定通りに設定されていることから、以下の手続きを与えて配線上の局所命令にアクセスすることが出来ます。

(define (get-signal wire) (wire 'get-signal))
(define (set-signal! wire new-value)
  ((wire 'set-signal!) new-value))
(define (add-action! wire action-procedure)
  ((wire 'add-action) action-procedure))

時間的に変化する信号を持ち皮下的に装置に取り付けられる配線はミュータブルなオブジェクトの特性をよく表している。
代入により変化するローカル状態変数を持つ手続きとしてモデル化した。
新しい配線が作成された時、新しい状態変数の信号は(make-wire中のlet式により)確保され、新しいdispatch手続きが構築され返され、
新しい状態変数を持つ環境が確保される。


予定表
シミュレータを完成させるために必要なものはafter-delayのみ。
ここでのアイディアはagenda(予定表)と呼ばれるデータ構造を保持し、それに行うべき予定を保存する。
以下の命令は予定表のために定義される。

(make-agenda): 新しい空の予定表を返す。
(empty-agenda? <agenda>): 指定した予定表が空であれば真である。
(first-agenda-item <agenda>): 予定表の最初のアイテムを返す。
(remove-first-agenda-item! <agenda>): 予定表から最初のアイテムを削除する。
(add-to-agenda! <time> <action> <agenda>): 指定された時間後に実行される行動手続きを追加する。
(current-time <agenda>): 現在のシミュレーション時間を返す。

使用する予定表はthe-agendaにより指定される。
手続きafter-delayは新しい要素をthe-agendaに追加する。

(define (after-delay delay action)
  (add-to-agenda! (+ delay (current-time the-agenda))
                  action
                  the-agenda))

シミュレーションは手続きpropagateにより駆動され、the-agenda上で操作を行い、予定表上の各手続きを順に実行します。
一般的にシミュレータが実行されるに連れ、新しいアイテムが予定表に追加され、propagateはシミュレーションを予定表にアイテムが存在する間は続ける。

(define (propagate)
  (if (empty-agenda? the-agenda)
      'done
      (let ((first-item (first-agenda-item the-agenda)))
        (first-item)
        (remove-first-agenda-item! the-agenda)
        (propagate))))


サンプルシミュレーション
回路上にprobeを置く以下の手続きは実行中のシミュレータを表示する。
probeは配線に対し信号値が変わるたびに新しい信号値を現在の時刻と配線を識別する名前を一緒に表示せよと命じる。

(define (prove name wire)
  (add-action! wire
               (lambda ()
                 (newline)
                 (display name)
                 (display " ")
                 (display (current-time the-agenda))
                 (display "  New-value = ")
                 (display (get-signal wire)))))

(define the-agenda (make-agenda))
(define inevrter-delay 2)
(define add-gate-delay 3)
(define or-gate-delay 5)

(define input-1 (make-wire))
(define input-2 (make-wire))
(define sum (make-wire))
(define carry (make-wire))

(probe 'sum sum)
(probe 'carry carry)

(half-adder input-1 input-2 sum carry)

(set-signal! input-1 1)

(propagate)






















