3.4.2 並行性制御のための仕組み

並行プロセスの取り扱いにおける困難は異なるプロセスのイベント順の交互配置について考える必要性に原因があることを学んだ。
例えば2つのプロセスがあり、1つは3つの順序付けられたイベント(a,b,c)で、もう一つは3つの順序付けられたイベント(x,y,z)であるとする。
もし2つのプロセスが、それらの実行がどのように相互配置されるのかについて制約無しで並列に実行された時、2つのプロセスのここの順は変わらないとしても、20の異なる起こりえるイベントの順が存在する。

プログラマがこのシステムを設計するにつれ、これらの30種の順序のそれぞれの結果について考慮して、各振る舞いが受け入れられるか確認する必要がある。
そのような取り組み方はプロセスとイベントの数が増加するに釣れ、急速に手におえないものとなる。
並行システムの設計に対するより現実的なアプローチはプログラムの振舞が正しいことを確認できるよう並行プロセスのインターリーブを成約できる一般的な仕組みを工夫すること。多くの仕組みがこの目的のために開発されてきた。serializer(並列直列変換器)


共有状態へのアクセスの直列化
直列化(serialization)は次の考えを実行する。
プロセスは並行に実行します。しかしいくつかの手続きの集合が存在し、それらは並行には実行できない。
もっと正確に言えば直列化は各直列化された集合内のただ1つの手続きの実行が一時に許されるような複数の区別された手続きの集合を作成する。
もし1つの集合内のいくつかの手続きが実行されるなら、集合内の任意の手続きを実行しようとするプロセスは最初の実行が完了するまで待つことを強制される。
直列化を用いて共有変数へのアクセスをコントロールできる。
例えばもし共有変数をその変数の前の値に応じて変更したい時、同じ手続き内でその変数の以前の値にアクセスし、その変数に新しい値を代入する。
それからその変数に代入するどのほかの手続もこの手続とは並行には実行できないことを、同じシリアライザを持つこれらの手続きのすべてを直列化することにより確実にする。これはその変数の値あgアクセスとそれに対応する代入の間に変更されることができないことを保証する。


Schemeのシリアライザ
parallel-execute(並列実行)と呼ばれる手続きを含む拡張Schemeを持っていると仮定する。

(parallel-execute <p1> <p2> ... <pk>)
各<p>は引数なしの手続きでなければならない。parallel-executeは分離されたプロセスを各<p>に対して作り、それらのプロセスは<p>を引数無しで適用する。
これらのプロセスはすべて並行に実行される。

(define x 10)
(parallel-execute
 (lambda () (set! x (* x x)))
 (lambda () (set! x (+ x 1))))

この2つの並行プロセスを作成する。
実行完了後にp1とp2のイベントのインターリーブに依存するため、xは5つの起こりえる値のうち1つになる。

並行性をserializerにより作成された直列化された手続きを用いることで抑制することができる。
シリアライザはmake-serializerにより構築され、この実装は後ほど与えられる。
シリアライザは手続きを引数として取り、元の手続きのように振る舞うserialized(被直列化)手続きを返す。
与えられたシリアライザへのすべての呼び出しは同じ集合に属する被直列化手続きを返す。
(define x 10)
(define s (make-serializer))
(parallel-execute
 (s (lambda () (set! x (* x x))))
 (s (lambda () (set! x (+ x 1)))))

xに対しただ2つの起こりえる値、101, 121を返す。
他の可能性はp1とp2の実行がインターリーブされないため排除された。


(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((protected (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw) (protected withdraw))
            ((eq? m 'deposit) (protected deposit))
            ((eq? m 'balance) balance)
            (else (error "Unknown request: MAKE-ACCOUNT" m))))
    dispatch))

このじそすにより、2つのプロセスは単一の口座に並行に預け入れと引き出しを行うことはできなくなった。
