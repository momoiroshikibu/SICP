3.4.2 並行性制御のための仕組み

並行プロセスの取り扱いにおける困難は異なるプロセスのイベント順の交互配置について考える必要性に原因があることを学んだ。
例えば2つのプロセスがあり、1つは3つの順序付けられたイベント(a,b,c)で、もう一つは3つの順序付けられたイベント(x,y,z)であるとする。
もし2つのプロセスが、それらの実行がどのように相互配置されるのかについて制約無しで並列に実行された時、2つのプロセスのここの順は変わらないとしても、20の異なる起こりえるイベントの順が存在する。

プログラマがこのシステムを設計するにつれ、これらの30種の順序のそれぞれの結果について考慮して、各振る舞いが受け入れられるか確認する必要がある。
そのような取り組み方はプロセスとイベントの数が増加するに釣れ、急速に手におえないものとなる。
並行システムの設計に対するより現実的なアプローチはプログラムの振舞が正しいことを確認できるよう並行プロセスのインターリーブを成約できる一般的な仕組みを工夫すること。多くの仕組みがこの目的のために開発されてきた。serializer(並列直列変換器)


共有状態へのアクセスの直列化
直列化(serialization)は次の考えを実行する。
プロセスは並行に実行します。しかしいくつかの手続きの集合が存在し、それらは並行には実行できない。
もっと正確に言えば直列化は各直列化された集合内のただ1つの手続きの実行が一時に許されるような複数の区別された手続きの集合を作成する。
もし1つの集合内のいくつかの手続きが実行されるなら、集合内の任意の手続きを実行しようとするプロセスは最初の実行が完了するまで待つことを強制される。
直列化を用いて共有変数へのアクセスをコントロールできる。
例えばもし共有変数をその変数の前の値に応じて変更したい時、同じ手続き内でその変数の以前の値にアクセスし、その変数に新しい値を代入する。
それからその変数に代入するどのほかの手続もこの手続とは並行には実行できないことを、同じシリアライザを持つこれらの手続きのすべてを直列化することにより確実にする。これはその変数の値あgアクセスとそれに対応する代入の間に変更されることができないことを保証する。


Schemeのシリアライザ
parallel-execute(並列実行)と呼ばれる手続きを含む拡張Schemeを持っていると仮定する。

(parallel-execute <p1> <p2> ... <pk>)
各<p>は引数なしの手続きでなければならない。parallel-executeは分離されたプロセスを各<p>に対して作り、それらのプロセスは<p>を引数無しで適用する。
これらのプロセスはすべて並行に実行される。

(define x 10)
(parallel-execute
 (lambda () (set! x (* x x)))
 (lambda () (set! x (+ x 1))))

この2つの並行プロセスを作成する。
実行完了後にp1とp2のイベントのインターリーブに依存するため、xは5つの起こりえる値のうち1つになる。

並行性をserializerにより作成された直列化された手続きを用いることで抑制することができる。
シリアライザはmake-serializerにより構築され、この実装は後ほど与えられる。
シリアライザは手続きを引数として取り、元の手続きのように振る舞うserialized(被直列化)手続きを返す。
与えられたシリアライザへのすべての呼び出しは同じ集合に属する被直列化手続きを返す。
(define x 10)
(define s (make-serializer))
(parallel-execute
 (s (lambda () (set! x (* x x))))
 (s (lambda () (set! x (+ x 1)))))

xに対しただ2つの起こりえる値、101, 121を返す。
他の可能性はp1とp2の実行がインターリーブされないため排除された。


(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((protected (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw) (protected withdraw))
            ((eq? m 'deposit) (protected deposit))
            ((eq? m 'balance) balance)
            (else (error "Unknown request: MAKE-ACCOUNT" m))))
    dispatch))

この実装により、2つのプロセスは単一の口座に並行に預け入れと引き出しを行うことはできなくなった。


複数共有リソース使用の複雑さ
シリアライザは並列プログラムの複雑性の分離を手助けすることで、注意深く正しく取り扱えるようにする強力な抽象化を与える。
しかしシリアライザの使用は(単一の銀行口座のような)ただ単一の共有リソースが存在する場合には相対的に簡単だが、並行プログラミングは複数の共有リソースがある場合に、裏切るかのように難しくなる。

(define (exchange account1 account2)
  (let ((difference (- (account1 'balance)
                       (account2 'balance))))
    ((account1 'withdraw) difference)
    ((account2 'deposit) difference)))

この手続は単一のプロセスのみが交換を試みる場合にはうまく働く。
正しい振る舞いのためには、exchange手続きを、交換の全体の準備の間、口座へのどの他の並行アクセスもロックアウトするように準備しなければならない。
これを達成する1つの方法は両方の口座のシリアライザを用いてexchange手続き全体を直列化する。
口座のシリアライザへのアクセスに準備を行う。シリアライザを露出することで、銀行口座オブジェクトのモジュール化を意図的に破っていることに注意。

(define (make-account-and-serializer balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
                balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((balance-serializer (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
            ((eq? m 'deposit) deposit)
            ((eq? m 'balance) balance)
            ((eq? m 'serializer) balance-serializer)
            (else
             (error "Unknown request: MAKE-ACCOUNT" m))))
    dispatch))

これを用いて直列化された預け入れと引き出しを行うことができます。
しかし最初の直列化された口座とは異なり、直列化を明示的に管理することは銀行口座オブジェクトの各ユーザーの責任。
(define (deposit account amount)
  (let ((s (account 'serializer))
        (d (account 'deposit)))
    ((s d) amount)))

シリアライザをこの方法で外出しすることは私たちに直列化された交換プログラムを実行するのに十分な柔軟性を与える。
単純に元のexchange手続きを両方の口座のシリアライザにて直列化する。

(define (serialized-exchange account1 account2)
  (let ((serializer1 (account1 'serializer))
        (serializer2 (account2 'serializer)))
    ((serializer1 (serializer2 exchange))
     account1
     account2)))


シリアライザの実装
私たちはシリアライザをmutex(ミューテックス、相互排除)と呼ばれるプリミティブな同期の仕組みを用いて実装する。
mutexは2つの命令をサポートするオブジェクト。
1つはmutexがacquired(獲得)でき、もう一つはmutexがreleasred(解放)できる。
一度mutexが獲得されれば、他のそのmutexに対する獲得命令はそのmutexが開放されるまで実行することができない。
私達の実装では各シリアライザは関連付けられたmutexを持つ。
手続きpを与えられた場合、シリアライザはmutexを獲得する手続きを返し、pを実行し、それからmutexをかいほうする。
これがシリアライザにより生成された手続きの1つのみが一度に実行できることを保証する。
これが保証する必要のある、直列化の特性。

(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex 'acquire)
        (let ((val (apply p args)))
          (mutex 'release)
          val))
      serialized-p)))

mutexはミュータブルなオブジェクト(ここで私たちは1要素のリストを使用し、cellとして参照する)であり、いくらかの関係性が数量の間に保存されることを示す。trueかfalseの値を保持する。値がfalseの時、mutexは獲得可能。
値がtrueの時、mutexは使用不可であり、このmutexを獲得しようと試みるプロセスは待たなければならない。
私達のmutexコンストラクタmake-mutexはセルの中身をfalseに初期化することから始める。
mutexを獲得するためにはセルを確認する。もしmutexが使用可能であれば、セルの中身をtrueにして続行する。
そうでなければループの中で待ち、mutexが使用可能になるまで何度も獲得を試みる。
mutexを解放するためにはセルの中身をfalseに設定する。

(define (make-mutex)
  (let ((cell (list false)))
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire)))
            ((eq? m 'release) (clear! cell))))
    the-mutex))

test-and-set!はセルをテストし、テストの結果を返す。
さらに、もしfalseであれば、test-and-set!はセルの中身にfalseを返す前にtrueを設定する。

(define (test-and-set! cell)
  (if (car cell) true (begin (set-car! cell true) false)))

test-and-set!命令はatomically実行されなければならない。
つまり、一度プロセスがセルをテストしfalseであると知ったならば、セルの中身が実際にセルをテストできる他のプロセスよりもtrueに設定されることを保証せねばならない。

test-and-set!の実際の実装は私達のシステムが並行プロセスをどのように実行するかの詳細に依存する。
例えば並行プロセスを逐次的なプロセッサ上に時分割のメカニズムを用いて複数のプロセスを循環させることで実行するかもしれない。
各プロセスに少ない時間の間割り込みが発生するまで実行することを許し次のプロセスを開始します。
このような場合にはtest-and-set!はテストと設定の間は時分割を停止することでうまくいく。

代替法として、マルチプロセスのコンピュータはアトミックな命令を直列ハードウェアにてサポートする。


シングルプロセッサ向けのMIT Schemeは時分割モデルを使うので、以下のように実装する。
(define test-and-set! (cell)
  (without-interruputs
   (lambda ()
     (if (car cell)
         true
         (begin (set-car! cell true)
                false)))))
without-interruputsは時分割割り込みをその引数である手続きが実行されている間、無効化する。


デッドロック
並行なアクセスを複数の共有リソースに対し提供するシステムでは常に存在する危険性。
防止策の一つは、各講座に固有の識別番号を与え、serialized.exchangeを書き換えることでプロセスが常に最も小さな番号の講座を守る手続きを最初に入るよう試みるようにする。
この方法は交換問題に対してうまくいくが、より洗練されたデッドロック防止技術を必要とする他の状況が存在する。
またはデッドロックが全く防げない状況も存在する。
