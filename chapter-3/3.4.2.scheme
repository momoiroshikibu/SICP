3.4.2 並行性制御のための仕組み

並行プロセスの取り扱いにおける困難は異なるプロセスのイベント順の交互配置について考える必要性に原因があることを学んだ。
例えば2つのプロセスがあり、1つは3つの順序付けられたイベント(a,b,c)で、もう一つは3つの順序付けられたイベント(x,y,z)であるとする。
もし2つのプロセスが、それらの実行がどのように相互配置されるのかについて制約無しで並列に実行された時、2つのプロセスのここの順は変わらないとしても、20の異なる起こりえるイベントの順が存在する。

プログラマがこのシステムを設計するにつれ、これらの30種の順序のそれぞれの結果について考慮して、各振る舞いが受け入れられるか確認する必要がある。
そのような取り組み方はプロセスとイベントの数が増加するに釣れ、急速に手におえないものとなる。
並行システムの設計に対するより現実的なアプローチはプログラムの振舞が正しいことを確認できるよう並行プロセスのインターリーブを成約できる一般的な仕組みを工夫すること。多くの仕組みがこの目的のために開発されてきた。serializer(並列直列変換器)


共有状態へのアクセスの直列化
直列化(serialization)は次の考えを実行する。
プロセスは並行に実行します。しかしいくつかの手続きの集合が存在し、それらは並行には実行できない。
もっと正確に言えば直列化は各直列化された集合内のただ1つの手続きの実行が一時に許されるような複数の区別された手続きの集合を作成する。
もし1つの集合内のいくつかの手続きが実行されるなら、集合内の任意の手続きを実行しようとするプロセスは最初の実行が完了するまで待つことを強制される。
直列化を用いて共有変数へのアクセスをコントロールできる。
例えばもし共有変数をその変数の前の値に応じて変更したい時、同じ手続き内でその変数の以前の値にアクセスし、その変数に新しい値を代入する。
それからその変数に代入するどのほかの手続もこの手続とは並行には実行できないことを、同じシリアライザを持つこれらの手続きのすべてを直列化することにより確実にする。これはその変数の値あgアクセスとそれに対応する代入の間に変更されることができないことを保証する。

