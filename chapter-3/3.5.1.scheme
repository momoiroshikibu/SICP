3.5.1 ストリームとは遅延化リスト

列をリストとして表現するとこの洗練さは演算により必要とされる時間と記憶域に関する深刻な日効率性を犠牲にして得ることになる。
列上の操作をリストの変形として表現した時、私達のプログラムは(大きくなり得る)データ構造を処理の各ステップにおいて構築とコピーをせねばならない。

(define (sum-primes a b)
  (define (iter count accum)
    (cond ((> count b) accum)
          ((prime? count)
           (iter (+ count 1) (+ count accum)))
          (else (iter (+ count 1) accum))))
  (iter 1 0))

(define (sum-primes a b)
  (accumulate + 0
              (filter prime? (enumerate-interval a b))))

演算の実行において、最初のプログラムは蓄積される合計のみを格納する必要がある。
逆に、2つ目のプログラムのフィルタはenumerate-intervalが区間の数の完全なリストを構築するまで一度もテストを行うことができない。
フィルタは別のリストを生成し、合計を形成するため畳み込まれる前に順にaccumulateに渡される。そのような大きな中間ストレージは最初のプログラムでは必要ない。

ストリームは列をリストとして扱うコストを負担することなく列操作を用いることが可能な賢明な考え。
ストリームを用いると2つの世界の良い所取りができる。

基本的なアイディアはストリームを部分的にのみ構築する準備をおkのアイ、部分的な構築物をストリームを消費するプログラムに渡す。
もし消費プログラムがまだ構築されていないストリームの部分にアクセスしようと試みた場合、ストリームは要求された部分を生成するために自動的にそれ自身の十分な追加を構築する。
したがって、ストリーム全体が存在するという錯覚を維持することが出来る。
完全な列を処理するようなプログラムを書くが、ストリーム実装に自動的に、透過的にストリームの構築とその使用を相互配置するように設計する。
表面上では、ストリームはそれを操作するための異なった名前を持つただのリスト。
コンストラクタcons-streamと以下の制約を満たす2つのセレクタstream-carとstream-cdrが存在する。

(stream-car (cons-stream x y)) = x
(stream-cdr (cons-stream x y)) = y

判別可能なオブジェクトthe-empty-streamが存在し、これはどんなcons-stream命令の結果にはなりえず、術後stream-null?にて識別できる。
したがってストリームを作成し、使用して、リストの作成と使用と同様に、順ぶされた列のデータの集約を表現できる。

(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))

(define (stream-map proc s)
  (if (stream-null? s)
      the-empty-stream
      (cons-stream (proc (stream-car s))
                   (stream-map proc (stream-cdr s)))))

(define (stream-for-each proc s)
  (if (stream-null? s)
      'done
      (begin (proc (stream-car s))
             (stream-for-each proc (stream-cdr s)))))

(define (display-stream s)
  (stream-for-each display-line s))

(define (display-line x) (newline) (display x))

ストリームの実装に自動的、かつ透過的にストリームの構築とその使用を相互配置させるためには、ストリームのcdrが、ストリームがcons-streamにより構築された時ではなく、stream-cdr手続きによりアクセスされた時に評価されるように手筈を整える。
データ抽象化としては、ストリームはリストと同様。違いは要素が評価されるタイミング。
通常のリストではcarとcdrの両方は構築時に評価される。
ストリームではcdrは選択時に評価される。

私達のストリームの実装はdelayと呼ばれる特殊形式を元にする。
(delay <exp>)の評価は式<exp>を評価しない。しかしその代わりにいわゆるdelayed object(遅延オブジェクト)を返す。
これはある将来の時点で<exp>を評価する"promise"として考えることができる。
delayの相方としてforceと呼ばれる手続きが存在し、遅延オブジェクトを引数として取り、評価を実行する。
実際にdelayにその約束を果たさせることを強要する。

cons-streamは特殊形式で

(cons-stream <a> <b>)

上が以下と同じになるよう設計されている。

(cons <a> (delay <b>))

これの意味するところは、私たちはペアを用いてストリームを構築する。しかし、ペアのcdrにストリームの残りの値を置くのではなく、そこにプロミスを起き要求された時点で残りを計算する。
これでstream-carとstream-cdrが手続きとして定義できる。

(define (stream-car stream) (car stream))
(define (stream-cdr stream) (force (cdr stream)))

stream-carはペアのcarを選択する。
stream-cdrはペアのcdrを選択し、そこに見つかった遅延表現を評価し、ストリームの残りを得る。


ストリーム実装の実践
(stream-car
 (stream-cdr
  (stream-filter prime?
                 (stream-enumerate-interval
                  10000 1000000))))

stream-enumerate-intervalを引数10,000と1,000,000をともに呼び出すことからはじめる。
stream-enumerate-intervalはenumerate-intervalのストリーム版。

(define (stream-enumerate-interval low high)
  (if (> low high)
      the-empty-stream
      (cons-stream
       low
       (stream-enumerate-interval (+ low 1) high))))

したがってstream-enumerate-intervalで返される結果は、cons-streamで形成された

(cons 10000
      (delay (stream-enumerate-interval 10001 1000000)))

つまりstream-enumerate-intervalはペアとして表現されたストリームを返しそのcarは10,000でそのcdrはプロミスでありもし要求されれば区間のより多くを列挙する。
このストリームはここでフィルタをかけ素数を残す。

(define (stream-filter pred stream)
  (cond ((stream-null? stream) the-empty-stream)
        ((pred (stream-car stream))
         (cons-stream (stream-car stream)
                      (strema-filter
                       pred
                       (stream-cdr stream))))
        (else (stream-filter pred (stream-cdr stream)))))

stream-filterはストリームのstream-car(ペアのcarであり10,000)をテストします。
これは素数でないのでstream-filterは入力ストリームのstream-cdrを調査します。
stream-cdrの呼び出しは遅延化されたstream-enumerate-intervalの評価を強制する。

(cons 10001
      (delay (stream-enumerate-interval 10002 1000000)))

stream-filterいまこのストリームのstream-carである10,001を見て、これもまた素数でないことを確認し、もう一度stream-cdrを強制する。
これをstream-enumerate-intervalが10.007を生じるまで繰り返し、するとすぐにstream-filterはその定義に従い以下を返す。
(cons-stream (stream-car stream)
             (stream-filter pred (stream-cdr stream)))

これはこの場合以下のようになる。

(cons 10007
      (delay (stream-filter)
             prime?
             (cons 10008
                   (delay (stream-enumerate-interval
                           10009
                           1000000)))))

これでこの結果は元の式stream-cdrに渡される。
これにより遅延されたstream-filterが強制され、それが順に遅延されたstream-enumerate-intervalを次の素数、10009を見つけるまで強制する。
最終的に、結果が私達の元の式のstream-carに渡されたものが以下

(cons 10009
      (delay (stream-filter
              prime?
              (cons 10010
                    (delay (stream-enumerate-interval
                            10011
                            1000000))))))

stream-carが10,009を返し計算が完了します。2つ目の素数を見つけるのに必要なだけの整数が素数性のテストを受け、区間は素数フィルタに入力するのに必要なだけ列挙された。
一般的に、遅延評価はdemand-driven(駆動要求)プログラミングだと考えることが出来、ストリーム処理の各ステージは次のステージを満たすのに十分な場合にのみ駆動される。
見かけ上の構造から実際のイベントの順を分断することを行った。手続きをストリームが”一度にそろって”存在するかのように書くが、実際には演算は漸増的に伝統的なプログラミングスタイルのように実行される。

