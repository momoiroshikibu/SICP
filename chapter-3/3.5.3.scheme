3.5.3 ストリームパラダイムの利用
遅延評価を伴うストリームは強力なモデリングツールにすることができ、局所状態と代入の利点の多くを提供する。
さらにプログラミング言語への代入の導入に伴う、いくつかの理論的な混乱を防ぐ。
ストリームのアプローチは私たちに、状態変数への代入の周りに体系化されたシステムよりも、異なるモジュール境界を伴うシステムを構築することを可能にするため、啓発的。
例えば、私たちは個別の瞬間における状態変数の値としてではなく、時系列全体を興味の中心として考えることが出来る。
このことが異なる瞬間の状態のコンポーネントの比較と接続を行うのにより便利にする。


反復をストリームプロセスとして定式化する
状態を更新される変数の集合としてではなく、永遠の値のストリームとして表すことが出来る。

(define (sqrt-improve guess x)
  (average guess (/ x guess)))

sqrt手続きでは、これらの推測値を状態変数の一連の値にした。
代わりに推測値の無限ストリームを作ることができる。

(define (sqrt-stream x)
  (define guesses
    (cons-stream
     1.0
     (stream-map (lambda (guess) (sqrt-improve guess x))
                 guesses)))
  guesses)

(display-stream (sqrt-stream 2))

今のところ、状態のストリームを使用する取り組みは状態変数を更新するものから大きくは異ならない。
しかしストリームは面白いトリックを行う機会を提供する。
例えば、近似値の列を、同じ値に、ただしより早く収束する列に変換するsequence accelerator(列アクセラレータ)を用いてストリームを変換することが出来る。

(define (euler-transform s)
  (let ((s0 (stream-ref s 0))
        (s1 (stream-ref s 1))
        (s2 (stream-ref s 2)))
    (cons-stream (- s2 (/ (square (- s2 s1))
                          (+ s0 (* -2 s1) s2)))
                 (euler-transform (stream-cdr s)))))


ペアの無限ストリーム
列パラダイムがどのように伝統的な入れ子ループをペアの列状に定義された手続きとして扱うかについて学んだ。
無限ストリームに対しても一般化すれば簡単には繰り返しとしては表現されないプログラムを書くことが出来る。
なぜなら、ループを無限集合の範囲にもわたらせなければならない。

(stream-filter
 (lambda (pair) (prime? (+ (car pair) (cadr pair))))
 int-pairs)

一般的なペアのストリームを(pairs S T)と呼び、それが3つの部分から組み立てられていると考える。
ペア(S0,T0)、最初の行の残りのペア、残りのペア

この3分解の3つ目の断片(最初の行に来ないペア)は再帰的に(stream-cdr S)と(stream-cdr T)から形成される。
また2番目の断片(最初の行の残り)は以下により求められる。
(stream-map (lambda (x) (list (stream-car s) x))
            (strema-cdr t))

従って私達のペアのストリームは以下により形成できる。

(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (<combine-in-some-way>
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))

(define (stream-append s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream (stream-car s1)
                   (stream-append (stream-cdr s1) s2))))

これは無限ストリームには不適切。
これは最初のストリームからの要素をすべて、2つめのストリームとの合併時に取る。
具体的には、もしすべての正の整数のペアを以下のようにして生成しようとすると、

(pairs integers integers)

結果のストリームは最初に1番めの整数が1の場合のすべてのペアを通して実行しようとする。
そしてそれゆえに1番めの整数が他の値のペアを全く生成することができない。
無限ストリームを扱うためには、プログラムを十分に長く実行したならばすべての実装がいつかは得られることを保証する組み合わせの順を工夫する必要がある。
interleave(相互配置)を用いる。

(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream (stream-car s1)
                   (interleave s2 (stream-cdr s1)))))

interleaveは2つのストリームから交代に要素を得るため、2つ目のストリームの各要素がいつかは相互配置ストリームへ入ることが、たとえ最初のストリームが無限でもわかる。
(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))


信号としてのストリーム
(define (integral integrand initial-value dt)
  (define int
    (cons-stream initial-value
                 (add-streams (scale-stream integrand dt)
                              int)))
  int)

