3.5.4 ストリームと遅延評価

(define int
  (cons-stream
   initial-value
   (add-streams (scale-stream integrand dt)
                int)))

暗黙的定義のようなものを扱うインタプリタの能力はcons-streamに組み込まれているdelayに依存している。
このdelay無しではインタプリタはintがすでに定義されていることを要件とするcons-streamへの引数両方を評価する前にはintを構築することができませんでした。
一般的に、delayはストリームを用いてループを含む信号処理システムをモデル化するのに不可欠。
delay無しでは任意の信号処理コンポーネントへの入力が、出力を生成する前に完全に評価されるように、私達のモデルが定式化されなければならない。
残念なことに、ループを伴うシステムのストリームモデルはcons-streamにより提供される隠れたdelayを超えて、delayの使用を要求する。

(define (solve f y0 dt)
  (define y (integral dy y0 dt))
  (define dy (stream-map f y))
  y)

この手続はうまくいかない。
solveの最初の行にてintegralの呼び出しは入力dyが定義されていることを要求する。
これはsolveの二行目までは起こりえない。
integralを再定義し、被積分関数ストリームがdelayed argument(遅延引数)を要求するようにする。

(define (integral delayed-integrand initial-value dt)
  (define int
    (cons-stream
     initial-value
     (let ((integrand (force delayed-integrand)))
       (add-streams (scale-stream integrand dt)
                    int))))
  int)

これでsolve手続きの実装がyの定義内でdyを遅延させればできる。
(define (solve f y0 dt)
  (define y (integral (delay dy) y0 dt))
  (define dy (stream-map f y))
  y)


正規順評価
delayとforceの使用がどのようにして大きなプログラミングの柔軟性を与えるかについて説明する。
しかし同じ例がまたこのことがどのようにしてプログラムをより複雑にするかについても示す。
一般的に、分離された手続きの組を作ることは分離された公開手続きの組もまた作ることを強いる。

2つの異なる手続きの組の必要性を防ぐ1つの方法はすべての手続に対し遅延引数を取らせる方法。
手続きに対するすべての引数が自動的に遅延化され、引数が実際に必要とされるとき(例えばプリミティブ命令に要求された時)強制される評価のモデルを受け入れることができるでしょう。
これは私達の言語を正規順評価を用いるように変形する。
正規準評価への変換は統一、せんれんされた方法で遅延評価の利用を簡易化する。
そしてこれはストリーム処理のみについて考慮するのであれば受け入れるべき自然な戦略。
残念なことに手続き呼び出しに遅延を導入することはイベント順に依存するプログラムを設計する能力に混乱をもたらす。
例えば代入を利用する、データを変更する、入出力を実行するプログラムです。
たとえ1つのcons-stream内のdelayでも、大きな混乱を招く。
変更可能性と遅延評価はプログラミング言語のなかではうまく混ざらない。
そしてこれらの両方を一度に取り扱う方法の発明は活発な研究領域。
