3.5.5 関数型プログラムのモジュール化とオブジェクトのモジュール化

ストリームモジュールはモジュールの容易性を代入の使用なしに提供可能。
例としてπのモンテカルロ推定を再実装してみる。
モジュール化容易性の鍵となる問題は、乱数生成器の内部状態を乱数を使用するプログラムから隠したいと願ったこと。手続きrand-updateから始めました。
これの連続する値が乱数を供給し、そしてこれを乱数生成器を創りだすのに使用した。

(define rand
  (let ((x random-init))
    (lambda ()
      (set! x (rand-update x))
      x)))

ストリームの定式化においては乱数生成器が単体では存在しない。
乱数のストリームがただrand-updateを連続して呼ぶことで生成される。

(define rand-numbers
  (cons-stream random-init
               (stream-map rand-update random-numbers)))

これを用いて乱数ストリームにおける連続したペア上で行われたチェザロの実験の結果のストリームを構築する。

(define cesaro-stream
  (map-successive-pairs
   (lambda (r1 r2) (= (gcd r1 r2) 1))
   random-numbers))

(define (map-successive-pairs f s)
  (cons-stream
   (f (stream-car s) (stream-car (stream-cdr s)))
   (map-successive-pairs f (stream-cdr (stream-cdr s)))))

cesaro-streamが次にmonte-carlo手続きに与えられる。
これは確率の推測のストリームを生成する。
するとその結果はπの推測値のストリームへと変換される。

(define (monte-carlo experiment-stream passed failed)
  (define (next passed failed)
    (cons-stream
     (/ passed (+ passed failed))
     (monte-carlo
      (stream-cdr experiment-stream) passed failed)))
  (if (stream-car experiment-stream)
      (next (+ passed 1) failed)
      (next passed (+ failed 1))))

(define pi
  (stream-map
   (lambda (p) (sqrt (/ 6 p)))
   (monte-carlo cesaro-stream 0 0)))

考慮すべきモジュール化容易性がこの取組には存在する。
なぜなら依然として任意の実験を取り扱うことが可能な一般的なモンテカルロ手続きを定式化できるため。
その上、代入やローカル変数が存在しない。


時間の関数型プログラミング的視点
ストリームが局所状態を持つオブジェクトのモデル化する代替法を提供することを学んできた。
何らかのオブジェクトの局所状態のような変化する数量を、連続する状態の時刻歴を表現するストリームを用いてモデル化出来る。
本質的に、ストリームを用いることで時間を明示的に表現している。
そうすることでシミュレートされた世界の時間を評価の間に現れる一連のイベントから分断している。
実際に、delayの存在のため、モデルのシミュレートされた時間と評価中のイベントの順の間にはなんの関係もない。

(define (make-simplified-withdraw balance)
  (lambda (amount)
    (set! balance (- balance amount))
    balance))

make-simplified-withdrawへの呼び出しは計算オブジェクトを生成する。
各計算オブジェクトは局所状態変数balanceを個別に持ち、そのオブジェクトを続けて呼ぶとbalanceは減少する。

(define (stream-withdraw balance amount-stream)
  (cons-stream
   balance
   (stream-withdraw (- balance (stream-car amount-stream))
                    (stream-cdr amount-stream))))

stream-withdrawは明確な数学上の関数を実装し、関数の出力はその入力のみにより完全に決定します。
しかし入力amount-streamがユーザにより打鍵された一連の値のストリームであり結果の残高ストリームが表示されたと考えてみてください。
すると、値を入力して見ているユーザの視点からはストリーム処理がmake-simplified-withdrawにより作成されたかのように、同じ振る舞いをしている。
しかしストリーム版では代入が無く、局所状態変数が無く、それゆえに論理的な困難が存在しない。
ユーザが相互作用から一歩離れて個々の取引ではなく、残高のストリームに関して考えれば、システムはステートレス(状態がない)として現れる。

複雑な処理のある部分の視点からは、他の部分は時間とともに変化するように見える。
それらは隠された時間とともに変化する局所状態を持つ。
もし私達がこの種の自然な分解を私達の世界において(世界の一部である私達の視点から見たままに)計算機内のモデル化したぷろぐらむを計算機内の構造を用いて書きたいのならば、関数型でない計算オブジェクトを作成します。
それらは時間と共に変化します。
状態を局所状態変数でモデル化し、そして状態の変化をそれらの変数への代入を用いてモデル化します。
これを行うことにより計算の実行時間を、私達がその一部である世界の時間のモデルとし、従って私たちはオブジェクトを計算機の中に得ることになる。

オブジェクトを用いるモデリングは強力かつ直感的。
私達がその一部である世界との相互作用の視点に合うため。
これらのモデルは悩ましいイベント順の制約と複数の処理感の同期の問題を提起する。
これらの問題を防ぐ可能性からfunctional programming languagesの開発が促進されてきた。
これは代入は変更可能なデータを提供しない。
そのような言語ではすべての手続は引数の明確な数学の関数を実装し、その振る舞いは変化しない。
関数型の取り組み方は並行システムを扱うのにとても魅力的。

関数型のスタイルをサポートする取り組みにおいて、異なる要因からの入力のマージの必要性は関数型のスタイルが排除するはずだった同じ問題を再び導入する。
世界を分離した、時間制約のある、相互応答する、状態を持つオブジェクトでモデル化出来る。
または世界を単一の、時間制約のない、状態のない個体によりモデル化できる。
それぞれの視点が強力な利点を持つが、どちらの視点も単独では十分ではない。

