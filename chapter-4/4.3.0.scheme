4.3 Scheme上でのバリエーション - 非決定性演算

nondeterministic computing(非決定性演算)と呼ばれるプログラミングパラダイムをサポートするよう、評価機の中に自動的な探索をあsポートするための機能を構築することで、Scheme評価機を拡張する。
非決定性演算はストリーム処理のように"生成してテストする"アプリケーションに対して便利。
正の整数の2つのリストを用いて開始する、整数のペアを見つけるタスクについて考える。
1つは最初のリストから、もう一つは別のリストから取得し、その和は素数となる。
単純に(何らかの方法で)最初のリストから数値を選択し、別の数値を2つ目のリストから選択し、何らかの仕組みでそれらの我が素数であることを要求すると想像してみる。

(define (prime-sum-pair list1 list2)
  (let ((a (an-elemnet-of list1))
        (b (an-element-of list2)))
    (require (prime? (+ a b)))
    (list a b)))

この手続は問題を言い直したにすぎず、解法を指定したようには見えない。
それにもかかわらず、これは正規の非決定性プログラム。
ここでの鍵となる考えは、非決定性言語における式は1つ以上の可能な値を持つことができるということ。
例えばan-element-ofは与えられたリストのどの要素でも返すことがあり得る。
私達の非決定性プログラム評価機は自動的に可能な値を選択しその選択を追跡することで働く。
もし続く要件に合わなければ評価機は異なる選択を試す。
そして評価が成功するまで、または選択肢がなくなるまで、新しい選択を試し続ける。
遅延評価がプログラマを値がどのように遅延化され強制されるかの詳細から開放されたのと同様に、非決定性プログラムの評価機はプログラマを選択がどのように行われるかの詳細から開放する。
非決定性評価とストリーム処理により起こった時間の異なるイメージの対比は示唆的。
ストリーム処理は遅延評価を可能な答えのストリームが組まれた時間を実際のストリーム要素が生成された時間から分離する。
評価機はすべての可能な回答が私達の前に永遠の列の中に横たわっているというイリュージョンを支える。
非決定性評価機では式は可能な世界の集合の調査を表現する。
それぞれは選択の集合により判断される。
可能な世界のいくつかは行き止まりへと導き、一方、他は役立つ値へと導く。
非決定性プログラム評価機は時間の分岐と私達のプログラムが異なる可能な実行履歴を持つというイリュージョンを支える。
行き止まりにたどり着いた時には直前の選択地点に戻り、異なる分岐に従って進むことが可能。
以下で実装される非決定性プログラム評価機はamb評価機と呼ばれる。
それがambと呼ばれる新しい特殊形式に基づくため。
上記のprime-sum-pairの定義をamb評価機ドライバループにて(prime? an-element-of requireと一緒に)型を付け、以下のように手続きを実行することができる。
;; Amb-Eval input:
(prime-sum-pair '(1 3 5 8) '(20 35 110))
;;; Starting a new problem
;;; Amb-Eval value:
(3 20)
返り値は評価機が条件に合う選択が行われるまで繰り返し各リストから要素を選択した後に取得された。

