4.3.1 ambと検索
Schemeに非決定性を対応するよう拡張するために、ambと呼ばれる新しい特殊形式を導入する。

(amb <e1> <e2> ... <en>)

上の式はn個の式<ei>のうち1つをambiguouslyに返す。
(list (amb 1 2 3) (amb 'a 'b))

以下の6つの値の可能性がある
(1 a) (1 b) (2 a) (2 b) (3 a) (3 b)

単一の選択を行うambは通常の(単一の)値を生成する。
選択を行わないamb式(amb)は受け入れられる値のない式。
操作上、(amb)を評価された時に演算に対しfailを起こさせると考えることができる。
演算は異常終了し、何の値も生成されない。この考えを用いて、ある特定の述語式pが真でなければならないことを
以下のように表現可能。

(define (require p) (if (not p) (amb)))

ambとrequireを用いて上で使用されたam-element-ofを実装可能。
(define (an-element-of items)
  (require (not (null? items)))
  (amb (car items) (an-element-of (cdr items))))


an-element-ofはリストが空である場合には失敗する。
そうでなければリストの最初の要素か、リストの残りの要素から選択された要素を曖昧に返す。
無限の範囲の選択も表現可能。
以下の手続きは可能性としてある与えられたnに等しいか大きな任意の整数を返す。
(define (an-integer-starting-from n)
  (amb n (an-integer-starting-from (+ n 1))))

ストリーム処理はnではじまるすべての整数の列を返すオブジェクトを返す。
一方、amb手続きは単一の整数を返す。
抽象的に、amb式を評価することが時間に対しての分岐を起こさせ、演算は各分岐状にて指揮の可能な値の1つに上で続行するのだと想像することができる。
ambがnondeterministic choice point(非決定性選択点)を表現すると言える。
もし私達が動的に獲得できる十分な数のプロセッサを持つ計算機を持っているならば、探索に簡単な方法で実装できるでしょう。
実行はamb式に遭遇するまでは逐次的に行われます。遭遇した時点では多くのプロセッサが獲得され選択により暗示されたすべての並列実行を続けるために初期化されます。
各プロセッサは選択がそれしかなかったかのように逐次的に続行します。
その処理は失敗に遭遇して停止するか、さらなる分岐が起こるか、完了するまで続けられます。
一方で、もし私達が1つのプロセス(またはいくつかの並行プロセス)しか実行できない計算機を持っている場合には逐次的に動作する代替法を考えねばならない。
1つの方法としては評価機を選択店にたどり着いた時に無作為に分岐を選択するよう変更することが考えられる。
しかし無作為な選択は簡単に失敗する値へと導く。
評価機を何度も何度も実行し無作為な選択を行い失敗しない値を見つけることを期待するかもしれない。
しかしすべての可能な実行パス(実行経路)をsystematically search(体系的探索)をしたほうがより良い。
私達がこの節で開発し働きかけるamb評価機は体系的探索を次のように実装する。
評価機がambの適用に遭遇した場合に初期値として最初の選択肢を選択します。
この選択それ自身がさらなる選択へと導きます。評価機は常に初期値として最初の選択肢を各選択点にて選択します。
もし選択の結果が失敗となれば評価機はautomagicallyに最も最近の選択にbacktracksし、次の選択肢を試行します。
もしどこかの選択店において、すべての選択肢を使用してしまえば、評価機は以前の選択店へと戻りそこから再開します。
この処理はdepth-first search(深さ優先探索)またはchronological backtracking(クロノロジカルバックトラック、年代順バックトラック)として知られる探索戦略へと導く。

ドライバループ
amb評価機のドライバループはいくつかの普通ではない性質を持っている。
これは式を読み最初の失敗ではない実行の値を上で示されたprime-sum-pairの例のように表示します。
もし次の成功する実行の値を見たいのであれば、インタプリタにバックトラックして二番目の失敗ではない実行を生成する試行も命令します。
これはシンボルtry-againを入力することで伝えられます。
もしtry-againではない任意の式が与えられたなら、インタプリタは新しい問題を開始し、直前の問題の調査されていない選択肢を捨てます。

(prime-sum-pair '(1 3 5 8) '(20 35 110))
                                        ; (3 20)
try-again
                                        ; (3 110)
try-again
                                        ; (8 35)
try-again
                                        ; There are no more values of
(prime-sum-pair '(19 27 30) '(11 36 58))
                                        ; (30 11)
