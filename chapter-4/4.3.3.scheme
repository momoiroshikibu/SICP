4.3.3 Amb評価機の実装

通常のScheme式の評価機は値を返すか、永遠に停止しないか、またはエラーを発する。
非決定性Schemeでは式の評価はそれに加えて探索が行き止まり帰結する。
この場合には評価機は以前の選択点へバックトラックしなければなりません。
非決定性Schemeの解釈はこの特別な場合により複雑になります。
私たちは非決定性Schemeのためのamb評価機を分析評価機を変更することで構築します。
分析評価機のように、式の評価は式の分析により生成される実行手続きを呼ぶことにより達成される。
通常のSchemeの解釈と非決定性Schemeの解釈との違いは完全に実行手続きの中に存在する。


手続きと継続の実行
通常の評価機の実行手続きが1つの引数、実行の環境を取ることを思い出してください。
対照的に、amb評価機の実行手続きは3つの引数を取ります。環境とcontinuation procedures(継続手続き)と呼ばれる2つの手続きです。
式の評価はこれらの2つの継続の1つを呼ぶことで完了します。もし評価の結果が値に帰結するならばsucess continuation(成功継続)がその値と共に呼ばれます。
もし評価が行き止まりの発見に帰結したのであれば、failure continuation(失敗継続)が呼ばれます。
適切な継続の構築と呼び出しが非決定性評価機のバックトラックが実装される仕組み。
値を受け取り計算を続行することが成功継続の仕事。その値と共に、成功継続は別の失敗継続も渡される。
これはその後にもしその値が行き止まりに導いたなら呼び出される。

非決定性処理の他の分岐を試すのは失敗継続の仕事。非決定性言語の本質は式が選択肢の間の選択を兵衛gんするだろうと言う事実の中に存在します。
そのような式の評価はたとえ前もってどの選択肢受け入れ可能な結果に導くか知らなくても支持された代替となる選択の1つを用いて続行しなければならない。
これを処理するためには、評価機から選択肢から1つを取り出しこの値を成功継続に渡す。
この値と共に、評価機は後で異なる選択肢を選択するために呼び出し可能な失敗継続を構築し、一緒に渡す。

失敗は評価の間に引き起こされる。(言い換えれば失敗継続が呼ばれる)
例えばrequireの呼び出しは結果として(amb)が実行される場合がある。
これは常に失敗する式。その時点で手中にあるいsっぱ位継続が最も最近の選択点に他の選択肢を選択させる。
もしもうその選択点にて考えられる他の選択肢がない場合には、直前の選択点の失敗が引き起こされる。
以下その繰り返し。失敗継続はまた式の別の値を見つけるためのドライバループによるtry-again要求への応答としても起動される。

加えて、もし副作用命令(変数への代入など)がある選択の結果として分岐処理上で起こったならば、処理が行き止まりを見つけた時に、
新しい選択を行う前にその副作用を取消する必要があるかもしれない。
これは副作用命令に副作用を取り消し失敗を伝播させる失敗継続を生成させることで達成される。

失敗継続は以下により構築される。
amb式
amb式により行われた現在の選択が行き止まりに導いた場合に別の選択を行う仕組みを提供する
トップレベルドライバ
選択肢が枯渇した時に失敗を報告する仕組みを提供する
代入
失敗に割り込み、バックトラックの間に代入を取り消す

失敗は行き止まりに遭遇したその時のみ起動される。これは以下の場合に起こる。
・ユーザープログラムが(amb)を実行した
・ユーザーがトップレベルドライバにてtry-againを入力した

失敗継続はまた失敗処理の間にも呼ばれる。
・代入が副作用の取り消しを完了させることで失敗継続が作成された時に、それは割り込んだ失敗継続を、失敗を伝播させこの代入に導いた選択点に戻すために、またはトップレベルに戻すために呼びます。
・ambに対する失敗継続が選択肢を使いきった時、失敗を直前の選択点からトップレベルに伝播させるために、ambに対してもともと与えられた失敗継続を呼び出す。


評価機の構造
amb評価機に対する文法とデータの表現手続き、また基本的んaanalyze手続きはSection 4.1.7のものと等しい。
追加の構文手続きをambの特殊形式を認識するために必要とすることが異なる。
(define (amb? exp)
  (tagged-list exp 'amb))
(define (amb-choices exp) (cdr exp))

analyze内にこの特殊形式を認識し、適切な実行手続きを生成する呼び出しを追加しなければならない。

((amb? exp) (analyze-amb exp))

トップレベル手続きambevalは与えられた式を分析し、実行手続きを与えられた環境に対し、2つの与えられた継続と一緒に適用しなければなりません。
(define (ambeval exp env succeed fail)
  ((analyze exp) env succeed fail))

成功継続は2引数の手続き。
2引数は得られたばかりの値とその値がその後に失敗へと導いたなら使用される別の失敗継続。
失敗継続は引数なしの手続き。
そのため実行手続きの一般的な形は以下のようになる。

(lambda (env succeed fail)
  ;; succeed is (lambda (value fial) ...)
  ;; fail is (lambda () ...)
  ;; ...
  )

例えば、以下を実行すると

(ambeval <exp>
         the-global-environment
         (lambda (value fail) value)
         (lambda () 'failed))

与えられた式を評価し、式の値(評価が成功した場合)かシンボルfailed(評価が失敗した場合)を返す。
以下で示されるドライバループ内でのambevalの呼び出しはより多くの複雑な継続手続きを使用する。
これらはループを継続しtry-again要求をサポートする。
ambの複雑さの多くは実行手続きがお互いを呼ぶに従い、継続をたらい回しにすることから来ている。


単純な式
最も単純な種類の式に対する実行手続きは本質的に通常の評価機に対するものと同じ。
ただし、継続を管理する必要が有ることが異なる。
これらの実行手続きは式の値と共に単純に成功し、渡された失敗継続をそのままで渡す。

(define (analyze-self-evaluating exp)
  (lambda (env succeed fail)
    (succeed exp fail)))

(define (analyze-quoted exp)
  (let ((qval (text-of-quotation exp)))
    (lambda (env succeed fail)
      (succeed qval fail))))

(define (analyze-variable exp)
  (lambda (env succeed fail)
    (succeed (lookup-variable-value exp env)
             fail)))

(define (analyze-lambda exp)
  (let ((vars (lambda-parameters exp))
        (bproc (analyze-sequence (lambda-body exp))))
    (lambda (env succeed fail)
      (succeeed (make-procedure vars bproc env)
                fail))))

変数の検索が常に成功することに注意。
もしlookup-variable-valueが変数を見つけるのに失敗した場合、それはいつもどおりにエラーを発する。
そのような失敗はプログラムのバグ(未束縛な変数への参照)を示す。
これは現在試行中のものの代わりに別の非決定性選択を試すことを示してはいけない。


条件文と列
条件文もまた通常の評価機と同様に取り扱われる。
analyze-ifにより生成される実行手続きは述語実行手続きpprocを成功継続と共に起動する。
成功継続は述語の値が真であるかチェックし、結果部下大腿部を実行する。
もしpprocの実行が失敗したならif式に対する元の失敗継続が呼ばれる。

(define (analyze-if exp)
  (let ((pproc (analyze (if-predicate exp)))
        (cproc (analyze (if-consequent exp)))
        (aproc (analyze (if-alternative exp))))
    (lambda (env succeed fail)
      (pproc env
             ;; 述語を評価するための成功継続を置く
             ;; pred-valueを得るため
             (lambda (pred-value fail2)
               (if (true? pred-value)
                   (cproc env succeed fail2)
                   (aproc env succeed fail2)))
             ;; 述語を評価するための失敗継続
             fail))))

列もまた以前の評価機と同様に扱われる。
ただし継続を渡すために必要とされる内部手続sequentially内の企みがkとなる。
具体的にはaを実行し、次にbと順に行うために、aと成功継続を共に呼び、成功継続がbを呼ぶ。

(define (analyze-sequence exps)
  (define (sequentially a b)
    (lambda (env succeed fail)
      (a env
         ;; aを呼ぶための成功継続
         (lambda (a-value fail2)
           (b env succeed fail2))
         ;; aを呼ぶための失敗継続
         fail)))
  (define (loop first-proc rest-procs)
    (if (null? rest-procs)
        first-proc
        (loop (sequentially first-proc
                            (car rest-procs))
              (cdr rest-procs))))
  (let ((procs (map analyze exps)))
    (if (null? procs)
        (error "Empty sequence: ANALYZE"))
    (loop (car procs) (cdr procs))))


定義と代入
定義は継続を管理するために手間をかけなければならない一例。
定義の値(definition-value)の式を実際に新しい値を定義する前に評価する必要が有るため。
これを達せうするためには定義値実行手続きvprocが環境、成功継続、失敗継続と共に呼ばれる。
もしvprocの実行が成功したならば定義値のための値valを取得し、変数が定義され成功が伝播される。
(define (analyze-definition exp)
  (let ((var (definition-variable exp))
        (vproc (analyze (definition-value exp))))
    (lambda (env succeed fail)
      (vproc env
             (lambda (val fail2)
               (define-variable! var val env)
               (succeed 'ok fail2))
             fail))))

代入は継続をたらい回しにするのではなく、本当に継続を使用する最初の場所。
代入のための実行手続きは定義のためのものと同様に開始する。最初に変数に代入される新しい値を取得しようと試みる。
もしこのvprocの評価が失敗したら代入は失敗する。
しかしvprocが成功し代入を行おうとした場合には、この計算の分岐が後に失敗する可能性について考えねばならない。
この場合には代入から外れてバックトラックする必要がある。
従ってこの代入をバックトラック処理の一部分として取り消しする準備をしなければならない。
これはvprocに成功継続を与えることで達成される。
この成功継続は新しい値を代入し、結果として存在する前に、変数の古い値を保持する。
代入値と共に渡された失敗継続は失敗を続ける前に変数の古い値を再格納する。
つまり、代入の成功は後の失敗に割り込む失敗継続を提供する。

(define (analyze-assignment exp)
  (let ((var (assignment-variable exp))
        (vproc (analyze (assignment-value exp))))
    (lambda (env succeed fail)
      (vproc env
             (lambda (val fail2)
                  (let (old-value (lookup-variable-value var env)))
                  (set-variable-value! var val env)
                  (succeed 'ok
                           (lambda ()
                             (set-variable-value! var old-value env)
                             (fail2))))
             fail))))
