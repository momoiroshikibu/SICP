4.4.2 クエリシステムの働き方

クエリシステムはパターンマッチングとユニフィケーションの周りに体系化される。

パターンマッチング
pattern matcherはあるデータが指定されたパターンに適合するかどうかを試すプログラム。
例えばデータリスト
((a b) c (a b))
は
パターン
(?x c ?x)
に対しパターン変数?xが(a b)に束縛されることで適合します。
同じデータリストがパターン(?x ?y ?z)に対し?xと?zの両者が束縛され、?yがcに束縛されることで適合します。
これはまたパターン((?x ?y) c (?x ?y))に対しても?xがaに?yがbに束縛されることで適合します。
しかしこれはパターン(?x a ?y)には適合しない。
このパターンが2つ目の要素がシンボルaであるリストを指定しているため。

パターン抹茶はクエリシステムにより使用される。
クエリシステムは入力としてパターン、データ、フレームを取る。
フレームは様々なパターン変数に対する束縛を指定します。
パターンマッチャはデータがフレームに既に存在する束縛と一致する状態でパターンに適合するかどうかをチェックします。
もしそうであれば、その適合により決定された任意の束縛を増やしたフレームを返します。
そうでなければ、適合が失敗したことを示します。

例えばパターン(?x ?y ?x)を用いて(a b a)に空のフレームを与えられた場合に適合を行うと
?xがaに?yがaに束縛されることを指定するフレームを返す。
同じパターン、同じデータで?yがaに束縛されていると指定するフレームを用いて適合を行うと失敗します。
同じパターン、同じデータで?yがbに束縛され?xが未束縛であるフレームを用いて適合を行えば与えられたフレームに?xのaへの束縛を増やしたものが返される。
パターンマッチャはルールを含まない単純なクエリを処理するのに必要な仕組みのすべて。

(job ?x (computer programmer))

データベース内のすべてのアサーションを探索し、最初は空のフレームを考慮してパターンに適合するものを選択します。
探索を行った各適合に対して、適合により返されたフレームを用いてパターンを?xの値と共にインスタンス化する。


フレームのストリーム
フレームに対してパターンのテストを行うことはストリームの使用を通して体系化されている。
単一のフレームを与えられて、マッチング処理はデータベースのエントリを1つずつ通して実行する。
各データベースエントリに対してマッチャは適合が失敗したことを示す特別なシンボル化、フレームに対する拡張を生成する。
すべてのデータベースエントリに対する結果はストリーム内に集められ、フィルタを通すことで失敗が取り除かれる。
結果は与えられたフレームの適合を通すことでデータベース内のあるアサーションに拡張したすべてのフレームのストリーム。

クエリはフレームの入力ストリームを取り、ストリーム内の各フレームに対して上記のマッチング処理を実行する。
言い換えれば、入力ストリーム内の各フレームに対して、クエリはデータベース内のアサーションに対する適合による、すべてのフレームの拡張からなる新しいストリームを作成する。
これらのストリームの全ては次に組み合わされて1つの大きなストリームを形成する。
これは入力ストリーム内の各フレームのすべての可能な拡張を含んでいる。
このストリームがクエリの出力。
単純なクエリに応えるためにはクエリを単一のからフレームからなる入力ストリームと共に用いる。
結果としての出力ストリームは空にフレームに対するすべての拡張を含んでいる。
(言い換えれば、クエリに対するすべての答えを含む)
このフレームのストリームは次に、元々のクエリのパターンと各フレーム内の値でインスタンス化された変数のコピーのストリームを生成するのに利用される。

複合クエリ
フレームのストリーム処理実装の真に優雅な点は複合クエリを扱うときに明らかになる。
複合クエリの処理は適合の結果が指定されたフレームに一致するという私達のマッチャが要求する能力を利用する。
例えば2つのクエリのandを扱うクエリでは

(and (can-do-job ?x (computer programmer trainee))
     (job ?person ?x))

まず以下のパターンに適合するすべてのエントリを見つける
(can-do-job ?x (computer programmer trainee))

これはフレームのストリームを生成する。各フレームは?xに対する束縛を含んでいる。
次にストリーム内の各フレームに対し、与えられた?xに対する束縛に一致するように、以下のパターンに適合するすべてのエントリを探す。
(job ?person ?x)

そのような適合のそれぞれは?xと?personに対する束縛を含むフレームを生成する。
2つのクエリのandは一連の2つのクエリのコンポーネントの組み合わせであるとみなすことができる。
最初のクエリフィルタを通過するフレームはフィルタをかけられ、2つ目のクエリにてさらに拡張される。


ユニフィケーション
クエリ言語内のルールを扱うために、ルールの結果が与えられたクエリパターンに適合するルールを見つけなければならない。
ルールの結果はアサーションに似ているが、変数を含められるところが異なる。
そのためパターンマッチングの一般化(unification)と呼ばれる - を必要とし、その中でパターンとデータの両方が変数を持ちうる。
ユニファイアは2つの定数と変数を含むパターンを取り、2つのパターンを等しくする変数への値の割当が可能であるかどうか決定する。
もしそうであればこれらの束縛を含むフレームを返す。
(?x a ?y)と(?y ?z a)のユニフィケーションは?x ?y ?aがすべてaに束縛されなければならないフレームを指示する。
一方で(?x ?y a)と(?x b ?y)のユニフィケーションは失敗する。
2つのパターンを等しく出来る?yの値が存在しないため。
クエリシステムで用いられるユニファイアはパターンマッチャのように、フレームを入力として取り、このフレームと一致するユニフィケーションを実行する。
ユニフィケーションアルゴリズムはクエリシステムで最も技術的に難しい部分。
複雑なパターンを伴うため、ユニフィケーションの実行は演算を必要とするように見えるかもしれない。
パターンマッチが成功する場合、すべてのパターン変数は束縛され、それらに束縛される値は定数のみを持つ。
これはまたここまで見てきたすべてのユニフィケーションの例に対しても真。
しかし一般的に、ユニフィケーションが成功する場合には変数の値が完全には決定されるとは限らない。
いくつかの変数は未束縛のままで、他は変数を含む値に束縛される。
(?x a)と((b ?y) ?z)のユニフィケーションについて考える。
?x = (b ?y)であり a = ?z であると推論できる。
しかしそれいじょう?xと?yについて解くことは出来ない。
このユニフィケーションは失敗しない。2つのパターンを?xと?yに値を割り当てることで等しくすることは可能であるため。
この適合が?yのとり得る値を全く限定しないため、結果フレームに?yの束縛は全く入らない。
しかしこの適合は?xの値は限定する。?yがどのような値をとっても?xは必ず (b ?y) になる。
従って?xの(b ?y)への束縛はフレームへ入れられる。
もし?yの値がパターンマッチ、またはこのフレームに一致する必要のあるユニフィケーションにより後に決定されフレームに追加されたなら、その前に束縛された?xはこの値を参照することになる。

ルールの適用
ユニフィケーションはルールから推論を行わせるクエリシステムのコンポーネントに対する鍵。

(lives-near ?x (Hacker Alyssa P))

このクエリを処理するためには、支所に通常の上で説明されたパターンマッチ手続きを用いてこのパターンに適合するアサーションがデータベース内に存在するかどうかを見る。
次のステップは、クエリパターンと各ルールの結果とのユニフィケーション。
このパターンは以下のルールの結果とユニフィケーションすると
(rule (lives-near ?person-1 ?person-2)
      (and (address ?person-1 (?town . ?rest-1))
           (address ?person-2 (?town . ?rest-2))
           (not (same ?person-1 ?person-2))))

結果として同じフレームに?person-2が(Hacker Alyssa P)に束縛され、?xが同じ値として?person-1に束縛されなければならないことの指定がはいることを発見する。
これで、このフレームに関連して、このルールのボディにより与えられた複合クエリを評価する。

クエリをルールの結論とユニフィケーションすることで(成功すれば)元のフレームの拡張を形成する
拡張されたフレームを参照しながら、ルールのボディにより形成されたクエリを評価する。

これはLispのeval/apply評価機内での手続き適用のための手法と似ている。

手続きのパラメータをその引数に束縛することで元々の手つき環境を拡張するフレームを作成する
拡張された環境を参照しながら、手続きのボディにより形成された式を評価する。


単純なクエリ
クエリパターンとフレームのストリームを与えられた時、入力ストリーム内の各フレームに対して2つのストリームを生成する。

・(パターンマッチャを用いて)データベース内のすべてのアサーションに対してパターンの適合を行うことにより得られた拡張フレームのストリーム
・(ユニファイアを用いて)すべての可能なルールを適用することにより得られた拡張フレームのストリーム

これらの2つのストリームをアペンドすることにより、与えられたパターンを元のフレームに一致して満たすことができるすべての方法により成り立つストリームを生成する。
これらのストリーム(入力ストリームの各フレームに対して1つ)はこれですべてが1つの巨大なストリームに接続される。
したがってこの巨大ストリームは元の入力ストリーム内の任意フレームを与えられたパターンへの適合を生成するために拡張したすべての方法から成り立っている。



