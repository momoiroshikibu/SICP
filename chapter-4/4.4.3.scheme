4.4.3 論理プログラミングは記号論理学なのか？

論理プログラミングんお目的はプログラマに演算問題を2つの分離された問題”何”が求められるべきかと”どのように”求められるべきかに分解する技術を与えること。
これは記号論理学の明大の部分集合を選択することで達成される。これは人が演算したい対象すべてを記述するのに十分強く、けれども制御可能な手続き的解釈を行うには十分に弱いもの。
一方で、ここでの意図は論理プログラミング言語で指示されたプログラムは計算機により実行され得る実効的なプログラムでなければならない。
制御(どのように演算するか)は言語の評価順の使用に影響を受ける。
アサーションは単純な事実(アトミックな命題)を表現する。
ルールはルールのボディが持つ複数の場合に対数r、ルールの結論が持つ推測の結果を表現する。
ルールは自然な手続き的解釈を持つ。結論を成立させるためには、ルールのボディを定める。
したがって、ルールは演算を提示している。
しかし、ルールはまた記号論理学の命題であるともみなすことができるため、同じ結果が全体的に記号論理学の中で働くことによr言えられることを主張することで、論理プログラムにより遂行された任意の推論を正当化することができる。


無限ループ
システムがループに入る前に見つけるかどうかは、システムがデータベースのアイテムをチェックする順に関連する実装上の詳細に依存する。
総合に関連するルールの蓄積は予想することがより難しいループへと導く。
そしてループの出現はand内の節の順か、またはシステムがクエリを処理する順に関連する低レベルの詳細に依存する。

notの問題
もう一つのクエリシステムの予測できない出来事はnotに関連する。
クエリ言語のnotが記号論理学のnotと異なるずっと深刻な部分がある。
論理学では命題"not P"をPは死んでないことを意味すると解釈する。
しかしクエリシステムでは"not P"はPがデータベース内の知識から推論不可能であることを意味している。
