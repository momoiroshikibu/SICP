5.2.1 マシンモデル

make-machineにて生成された機械のモデルはメッセージパッシングの技術を用いた局所状態を持つ手続きとして表現されている。
このモデルを構築するために、make-machineは手続きmake-new-machineを呼びすべてのレジスタマシンに対して共通なマシンモデルの部品を構築することからはじめる。

make-machineは次にこの基本的なモデルを(それに対してメッセージを送ることで)拡張し、レジスタ、命令、定義される特定の機械のコントローラを含める。
最初に新しい機械の中に与えられた各レジスタ名に対するレジスタを獲得し、指定された命令をその機械にインストールする。
次にassemblerを用いてコントローラリストを新しい機会に対する命令に変換し、これらを機械の命令列としてインストールする。

(define (make-machine register-names ops controller-text)
  (let ((machine (make-new-machine)))
    (for-each
     (lambda (register-name)
       ((machine 'allocate-register) register-name))
     register-names)
    ((machine 'install-operations) ops)
    ((machine 'install-instruction-sequence)
     (assemble controller-text machine))
    machine))


レジスタ
レジスタは局所状態を持つ手続きとして表現される。
手続きmake-registerはアクセスと変更が可能な値を持つレジスタを作成する。
(define (make-register name)
  (let ((contentx '*unassigned*))
    (define (dispatch message)
      (cond ((eq? message 'get) contents)
            ((eq? message 'set)
             (lambda (value) (set! contents avlue)))
            (else
             (error "Unknown request: REGISTER" message))))
    dispatch))

以下の手続きはレジスタにアクセスするために使用される。
(define (get-contents register) (register 'get))
(define (set-contents! register value)
  ((register 'set) value))


スタック
スタックもまた局所状態を持つ手続きとして表現される。
手続きmake-stackは局所状態がスタック上のアイテム(項目)のリストからなるスタックを作成します。
スタックはスタック上にアイテムをpushとスタックから最上位のアイテムを取り去りそれを返すpop、スタックを空に初期化するinitializeのリクエストを受け付ける。

(define (make-stack)
  (let ((s '()))
    (define (push x)
      (set! s (cons x s)))
    (define (pop)
      (if (null? s)
          (error "Empty stack: POP")
          (let ((top (car s)))
            (set! s (cdr s))
            top)))
    (define (initialize)
      (set! s '())
      'done)
    (define (dispatch message)
      (cond ((eq? message 'push) push)
            ((eq? message 'pop) (pop))
            ((eq message 'initialize) (initialize))
            (else (error "Unknown request: STACK" message))))
    dispatch))

以下の手続きはスタックへのアクセスに使用される。
(define (pop stack) (stack 'pop))
(define (push stack value) ((stack 'push) value))


基本的な機械
make-new-machine手続きは局所状態がスタック、初期値が空の命令列、初期値がスタックを初期化する命令を持つ命令のリスト、
初期値として2つのレジスタflagとpc(program counter)を持つregister tableから成り立つ。
内部手続loopup-registerはテーブル内のレジスタを探す。
flagレジスタはシミュレートされる機械にて分岐をコントロールするために使用される。
test命令はflagの中身にテストの結果(真、または偽)を設定する。
branch命令は分岐するかしないかをflagの中身を調査して決定する。
pcレジスタは機械が実行する命令の順序付けを決定する。
この順序付けは内部手続executeにより実装されている。
シミュレーションモデルでは各機械命令はinstruction execution procedure(命令実行手続き)と呼ばれる引数なしの手続きを含むデータ構造であり、
この手続を呼ぶことにより命令の実行をシミュレートする。
シミュレーションが実行されるにつれ、pcは次に実行される命令から始まる命令列のち円を指す。
exeecuteはその命令を得て、それを命令実行手続きを呼ぶことで実行し、このサイクルを実行する命令がなくなるまで(pcが命令列の最後を指すまで)繰り返す。

(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '()))
    (let ((the-ops
           (list (list 'initialize-stack
                       (lambda () (stack 'initialize)))))
          (register-table
           (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "multiply defined register: " name)
            (set! register-table
                  (cons (list name (make-register name))
                        register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register:" name))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin
                ((instruction-execution-proc (car insts)))
                (execute)))))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set-contents! pc the-instruction-sequence)
               (execute))
              ((eq? message 'install-instruction-sequence)
               (lambda (seq)
                 (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register)
               allocate-register)
              ((eq? message 'get-register)
               lookup-register)
              ((eq? message 'install-operations)
               (lambda (ops)
                 (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              (else (error "Unknown request: MACHINE" message))))
      dispatch)))


工程の一部として、各命令の実行手続きはpcを変更し次に実行される命令を指すようにする。
branchとgoto命令はpcを変更し新しい行き先を指すようにする。
すべての他の命令は単純にpcを勧めて列の次の命令を指すようにする。
各executeの呼び出しがexecuteを再び呼び出すことに注意。
これは無限ループにはならない。命令実行手続きの実行はpcの中身を変更するため。

make-new-machineはdispatchを返す。
これはメッセージパッシングを実装する。
機械の開始はpcに命令列の最初を設定し、executeを呼ぶことにより達成される。
利便性のために、機械のstart命令の代替となる手続きのインタフェースを提供数r。

(define (start machine) (machine 'start))
(define (get-register-contents machine register-name)
  (get-contents (get-register machine register-name)))
(define (set-register-contents! machine register-name value)
  (set-contents! (get-register machine register-name) value)
  'done)

(define (get-register machine reg-name)
  ((machine 'get-register) reg-name))
