5.2.3 各命令に対する実行手続きの生成

アセンブラは命令の実行手続きを生成するためにmake-execution-procedureを呼ぶ。
これは適切な実行手続きを生成するために命令の型に従い呼び出しを行う。
(define (make-execution-procedure inst labels machine pc flag stack ops)
  (cond ((eq? (car inst) 'assign)
         (make-assign inst machine labels ops pc))
        ((eq? (car inst) 'test)
         (make-test inst machine labels ops flag pc))
        ((eq? (car inst) 'branch)
         (make-branch inst machine labels ops flag pc))
        ((eq? (car inst) 'goto)
         (make-goto inst machine labels pc))
        ((eq? (car inst) 'save)
         (make-save inst machine stack pc))
        ((eq? (car inst) 'restore)
         (make-restore inst machine stack pc))
        ((eq? (car inst) 'perform)
         (make-perform inst machine labels ops pc))
        (else
         (error "Unknown instruction type: ASSEMBLE" inst))))

レジスタマシンの言語の命令の各型に対し、適切な実行手続きを構築する生成器が存在します。
これらの手続きの詳細がレジスタマシン言語の構文と個別の命令の意味の両方を決定します。
データ抽象化を用いることで全体的な実行の仕組みからレジスタマシンの式の詳細な構文を分離している。

assign命令
make-assign手続きはassign命令を扱う
(define (make-assign let inst machine labels operations pc)
  (let ((target
         (get-register machine (assign-reg-name inst)))
        (value-exp (assing-value-exp inst)))
    (let ((value-proc
           (if (operation-exp? value-exp)
               (make-operation-exp
                value-exp machine labels operations)
               (make-primitive-exp
                (car value-exp) machine labels))))
      (lambda () ; assignに対する実行手続き
        (set-contents! target (value-proc))
        (advance-pc pc)))))

make-assignはターゲットとなるレジスタ名(命令の2つ目の要素)と値の式(命令を構成するリストの残りの部分)をassign命令からセレクタを用いて抽出する。
(define (assign-reg-name assign-instruction)
  (cadr assign-instruction))
(define (assign-value-exp assign-instruction)
  (addr assign-instruction))

レジスタ名がget-registerを用いて検索され目的のレジスタオブジェクトを生成します。
値の式はもし値が命令の結果であるのならmake-operation-expに渡され、そうでなければmake-primitive-expに渡されます。
これらの手続きは値の式を構文解析しその値に対する実行手続きを生成します。
これは引数無しの手続きでvalue-procと呼ばれ、シミュレーションの間にレジスタに代入される実際の値を生成するために評価される。
レジスタ名の検索と値の式の構文解析の仕事はただ一度、アセンブリ時(アセンブラ実行時)に実行されることに注意。
その命令がシミュレートされる度に毎回ではない。
この仕事量の削減こそが私達が実行手続きを使用する理由。

make-assignにより返される結果はassign命令のための実行手続き。
この手続がexecute手続きにより呼ばれた時にvalue-proc手続きを実行することにより得られた結果を目的のレジスタの中身に設定します。
その次にpcを以下の手続きを実行することにより次の命令へと進めます。

(define (advance-pc pc)
  (set-contents! pc (cdr (get-contents pc))))

advance-pcはbranchとgotoを除く全ての命令に対する通常の終わり。


Test, branch, goto命令
make-testはtest命令を同様な方法で扱います。
これはテストされる条件を指定する式を抽出し、それに対する実行手続きを生成します。
シミュレーション時に、条件のための手続きが呼ばれ、その結果がflagレジスタに割り当てられ、pcが進められます。

(define (make-test inst machine labels operations flag pc)
  (let ((condition (test-condition inst)))
    (if (operation-exp? condition)
        (let ((condition-proc
               (make-operation-exp
                condition machine labels operations)))
          (lambda ()
            (set-contents! flag (condition-proc))
            (advance-pc pc)))
        (error "Bad TEST instruction: ASSEMBLE" inst))))

(define (test-condition test-instruction)
  (cdr test-instruction))

branch命令のための実行手続きはflagレジスタの中身をチェックし、pcの中身に分岐の目的地を設定するか、または単にpcを進める。
branch命令内で指定された目的地はラベルでなければならず、make-branch手続きがこのことを強制することに注意。
またラベルはアセンブリ時に検索され、branch命令がシミュレートされる時に毎回検索されるわけでもない。

(define (make-branch inst machine labels flag pc)
  (let ((dest (branch-dest inst)))
    (if (label-exp? dest)
        (let ((insts
               (lookup-label
                labels
                (label-exp-label dest))))
          (lambda ()
            (if (get-contents flag)
                (set-contents! pc insts)
                (advance-pc pc))))
        (error "Bad BRANCH instruction: ASSEMBLE" inst))))

(define (branch-dest branch-instruction)
  (cadr branch-instruction))

goto命令はbranchに似ているが、目的地がラベル化、またはレジスタにより指定されることが異なる。
また条件分岐ではない。pcは常に新しい目的地に設定される。
(define (make-goto inst machine labels pc)
  (let ((dest (goto-dest inst)))
    (cond ((label-exp? dest))
          (let ((insts (lookup-label
                        labels
                        (label-exp-label dest))))
            (lambda () (set-contents! pc insts)))
          ((register-exp? dest)
           (let ((reg (get-register
                       machine
                       (register-exp-reg dest))))
             (lambda ()
               (set-contents! pc (get-contents reg)))))
          (else (error "Bad GOTO instruction: ASSEMBLE" inst)))))

(define (goto-dest goto-instruction)
  (cadr goto-instruction))


他の命令
スタック命令のsaveとrestoreは単純にスタックを指定したレジスタと共に用いて、pcを進める

(define (make-save inst machine stack pc)
  (let (9reg (get-register machine (stack-inst-reg-name inst)))
    (lambda ()
      (push stack (get-contents reg))
      (advance-pc pc))))

(define (make-restore inst machine stack pc)
  (let ((reg (get-register machine (stack-inst-reg-name inst))))
    (lambda ()
      (set-contents! reg (pop stack))
      (advance-pc pc))))

(define (stack-inst-reg-name stack-instruction)
  (cadr stack-instruction))

make-performで扱われる最後の命令形は実行されるべきアクションのための実行手続きを生成します。
シミュレーション時にこのアクション手続きが実行されpcは進められる。

(define (make-perform inst machine labels operations pc)
  (let ((action (perform-action inst)))
    (if (operation-exp? action)
        (let ((action-proc
               (make-operation-exp
                action machine labels operations)))
          (lambda () (action-proc) (advance-pc pc)))
        (error "Bad PERFORM instruction ASSEMBLE" inst))))
(define (perform-action inst) (cdr inst))


部分式の実行手続き
reg, label, const式の値はレジスタへの代入(make-assign)のため、または演算命令の入力(下記のmake-operation-exp)のために必要になるかもしれない。
以下の手続きはこれらの式のための値のシミュレーションの間に生成するための実行手続きを生成する。
(define (make-primitive-exp exp machine labels)
  (cond ((constant-exp? exp)
         (let ((c (constant-exp-value exp)))
           (lambda () c)))
        ((label-exp? exp)
         (let ((insts (lookup-label
                       labels
                       (label-exp-label exp))))
           (lambda () insts)))
        ((register-exp? exp)
         (let ((r (get-register machine
                                (register-exp-reg exp))))
           (lambda () (get-contents r))))
        (else
         (error "Unknown expression type: ASSEMBLE" exp))))

(define (register-exp? exp) (tagged-list? exp 'reg))
(define (register-exp-reg exp) (cadr exp))
(define (constant-exp? exp) (tagged-list? exp 'const))
(define (constant-exp-value exp) (cadr exp))
(define (label-exp? exp) (tagged-list? exp 'label))
(define (label-exp-label exp) (cadr exp))

assign, perform, test命令は(op式により指定される)機械の演算命令の(regとconst式により指定される)いくつかのオペランドへの適用を含むかもしれない。
以下の手続きは演算命令式 - 命令からの演算命令とオペランドの式を含むリスト - に対する実行手続きを生成する。

(define (make-operation-exp exp machine labels operations)
  (let ((op (lookup-prim (operation-exp-op exp)
                         operations))
        (aprocs
         (map (lambda (e)
                (make-primitive-exp e machine labels))
              (operation-exp-operands exp))))
    (lambda ()
      (apply op (map (lambda (p) (p)) (aprocs))))))

演算命令式の構文は以下により決定される。
(define (operation-exp? exp)
  (and (pair? exp) (tagged-list? (car exp) 'op)))
(define (operation-exp-op operation-exp)
  (cadr (car operation-exp)))
(define (operation-exp-operands operation-exp)
  (cdr operation-exp))

(define (lookup-prim symbol operations)
  (let ((val (assoc symbol operations)))
    (if val
        (cadr val)
        (error "Unknown operation: ASSEMBLE" symbol))))

