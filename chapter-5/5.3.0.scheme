5.3 記憶域の割当とガベージコレクション

私達のレジスタマシンはlist-structures memory(リスト構造メモリ)を備えていると仮定する。
この機会ではリスト構造のデータを走査する命令はプリミティブ。
そのようなメモリが存在するという過程はSchemeインタプリタの制御の仕組みに集中する場合には有用な抽象化。
しかしこれは現在のコンピュータの実際のプリミティブなデータ操作の現実の姿を反映してはいない。
Lispシステムがどのように動作するかのより完全な理解を得るためには、リスト構造がどのように旧来のコンピュータのメモリに互換性のある方法で表現されるかについて調査しなければならない。
リスト構造の実装には2つの考慮点が存在する。
1つは純粋に表現上の問題。Lispのペアによる箱とポインタ構造をストレージと典型的なコンピュータのメモリのアドレス指定能力を用いてどのように表現するか。
2つ目の問題は演算が進行するにつれてのメモリ管理に関係する。
Lispシステムの動作は決定的に、継続して新しいデータオブジェクトを作る能力に依存している。
これらは逐次実行されるLisp手続きにより明示的に作成されるオブジェクトと同様に、インタプリタ自身により作成される環境や引数リストのような構造も含む。
持続的な新しいデータオブジェクトの作成は無限の容量でかつ、高速にアドレス指定できるメモリを持つコンピュータ上では問題を起こさないでしょうが、コンピュータのメモリは有限な量しかない。
Lispシステムは従って無限のメモリという空間をサポートするautomatic storage allocation(自動記憶域割当)の設備を提供します。
データオブジェクトがすでに必要でなくなった時に、それに割り当てられたメモリは自動的にリサイクルされ新しく構築されるデータオブジェクトに利用される。
そのような自動的な記憶域割当を提供する多様な技術が存在する。
=> garbage collection(ガベージコレクション)

