5.3.1 ベクタとしてのメモリ

伝統的なコンピュータのメモリは小さな部屋の配列だと考えることができる。
各部屋は情報の一変を入れることができる。
各部屋はaddressまたはlocationと呼ばれる固有の名前を持つ。典型的なメモリシステムは2つのプリミティブな命令を提供する。
1つは指定された位置に格納されたデータを取り出し、もう一つは指定された位置に新しいデータを割り当てる。
メモリアドレスはある部屋の集合にシーケンシャルなアクセスをサポートするためにインクリメントすることができる。
より一般的には、多くの重要なデータの操作はメモリアドレスをデータとして扱うことを要求します。
このデータはメモリ上の位置に格納でき、機械のレジスタ上で操作できなければいけない。
リスト構造の表現はそのようなaddress arthmetic(アドレス演算)の一つの応用。

コンピュータメモリをモデル化するためには、vectorと呼ばれるアタrしい種類のデータ構造を用いる。
抽象的には、ベクタは複合データオブジェクトであり、その個別の要素が整数の索引を用いて、索引から独立した時間料でアクセスすることができる。
メモリ操作をせつめいするために、ベクタを扱うための2つのプリミティブなScheme手続きを使用する。

(vector-ref <vector> <n>)はベクタのn番目の要素を返す
(vector-set! <vector> <n> <value>)はベクタのn番目の要素に指定された値を設定する

例えば、vがベクタであるならば、(vector-ref v 5)はベクタvの5番めの項目を取得し、
(vector-set! v 5 7)はベクタvの5番めの項目の値を7に変更する。
コンピュータメモリに対して、このアクセスはアドレス演算を用いて、メモリ内のベクタの開始位置を指定するbase addressとベクタの特定の項目のオフセットを指定するindexを組み合わせることで実装することができる。

