5.3.2 無限のメモリの幻想を維持する

実際のコンピュータではいつかは新しいペアを構築するための空き容量を使いきってしまう。
しかし、典型的な演算により生成されるペアの多くは中間結果を保つためだけに使用される。
これらの結果がアクセスされた後には、それらのペアはもう必要ありません。
それらはgarbageです。例えば、以下の演算は
(accumulate + 0 (filter odd? (enumerate-interval 0 n)))
2つのリストを構築します。

enumeration(列挙)と列挙をフィルタリングした結果です。
accumulationが完了した時に、これらのリストはもう必要ありません。
そして割り当てられたメモリは返還要求できます。もし全てのゴミを定期的に回収する準備を行えるのであれば、
そしてもしこれが新しいペアを構築するのとだいたい同じ比率でメモリをリサイクルすることになれば、無限の要領のメモリが存在するという錯覚を維持することができます。
ペアをリサイクルするためには、どの割り当てられたペアが必要でないか(それらの中身がその後の将来の演算に影響しないという意味で)決定する方法を持たねばなりません。
これを達成するために調査する手法はgarbage collectionとして知られています。
ガベージコレクションはLispの逐次実行における任意の時点で、将来の演算に影響をあたえることができるオブジェクトは現状で機械のレジスタ内に存在するポインタによりたどり着くオブジェクトのみであるという観察結果に基づいている。
そのようにアクセスできないどのメモリセルもリサイクルして良い。

stop-and-copyの考えは、メモリを2つに分ける。ワーキングメモリと空きメモリ。
consがペアを構築する時、ワーキングメモリに割り当てる。ワーキングメモリに空きがない時、ワーキングメモリ内の使いみちのあるすべてのペアを探し出し、これらをフリーメモリ内の連続した位置にコピーすることでガベージコレクションを実行します。
(使いみちのあるペアは機械のレジスタからはじめて、全てのcarとcdrのポインタを追跡することにより探しだす)
ゴミはコピーしないため、推定上、新しいペアを割り当てるための利用できる追加の空きメモリが存在するはず。
加えて、ワーキングメモリ内の全てが必要ありません。
その中の使いみちのあるペアはコピーされている。従ってワーキングメモリと空きメモリの役割を交換すれば処理を続けることができる。
新しいペアは新しいワーキングメモリ(空きメモリだったもの)の中に割り当てられる。
これがいっぱいになったなら、使いみちのあるペアを新しい空きメモリ(ワーキングメモリだったもの)の中にコピーできる。

