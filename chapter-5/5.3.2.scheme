5.3.2 無限のメモリの幻想を維持する

実際のコンピュータではいつかは新しいペアを構築するための空き容量を使いきってしまう。
しかし、典型的な演算により生成されるペアの多くは中間結果を保つためだけに使用される。
これらの結果がアクセスされた後には、それらのペアはもう必要ありません。
それらはgarbageです。例えば、以下の演算は
(accumulate + 0 (filter odd? (enumerate-interval 0 n)))
2つのリストを構築します。

enumeration(列挙)と列挙をフィルタリングした結果です。
accumulationが完了した時に、これらのリストはもう必要ありません。
そして割り当てられたメモリは返還要求できます。もし全てのゴミを定期的に回収する準備を行えるのであれば、
そしてもしこれが新しいペアを構築するのとだいたい同じ比率でメモリをリサイクルすることになれば、無限の要領のメモリが存在するという錯覚を維持することができます。
ペアをリサイクルするためには、どの割り当てられたペアが必要でないか(それらの中身がその後の将来の演算に影響しないという意味で)決定する方法を持たねばなりません。
これを達成するために調査する手法はgarbage collectionとして知られています。
ガベージコレクションはLispの逐次実行における任意の時点で、将来の演算に影響をあたえることができるオブジェクトは現状で機械のレジスタ内に存在するポインタによりたどり着くオブジェクトのみであるという観察結果に基づいている。
そのようにアクセスできないどのメモリセルもリサイクルして良い。

stop-and-copyの考えは、メモリを2つに分ける。ワーキングメモリと空きメモリ。
consがペアを構築する時、ワーキングメモリに割り当てる。ワーキングメモリに空きがない時、ワーキングメモリ内の使いみちのあるすべてのペアを探し出し、これらをフリーメモリ内の連続した位置にコピーすることでガベージコレクションを実行します。
(使いみちのあるペアは機械のレジスタからはじめて、全てのcarとcdrのポインタを追跡することにより探しだす)
ゴミはコピーしないため、推定上、新しいペアを割り当てるための利用できる追加の空きメモリが存在するはず。
加えて、ワーキングメモリ内の全てが必要ありません。
その中の使いみちのあるペアはコピーされている。従ってワーキングメモリと空きメモリの役割を交換すれば処理を続けることができる。
新しいペアは新しいワーキングメモリ(空きメモリだったもの)の中に割り当てられる。
これがいっぱいになったなら、使いみちのあるペアを新しい空きメモリ(ワーキングメモリだったもの)の中にコピーできる。


stop-and-copyガベージコレクタの実装
私たちはrootと呼ばれるレジスタが存在し、ある構造体へのポインタを保持し、そのポインタから最終的には全てのアクセス可能なデータを指し示すことができるという前提を行う。
これはガベージコレクションを行う直前に全てのレジスタの中身を事前に割り当てられたリストに格納し、rootにより指し示させることで準備が行える。
私たちはまた現在のワーキングメモリに加えて、使いみちのあるデータをコピーできる空きメモリが存在すると前提する。
現在のワーキングメモリはベースアドレスがthe-carsとthe-cdrsと呼ばれるレジスタに格納されるベクタから成り立ち、そして空きメモリは同様にnew-carsとnew-cdrsと呼ばれるレジスタに格納される。
ガベージコレクションは現在のワーキングメモリ内の空きセルが枯渇した時に引き起こされる。
それはつまり、cons命令がfreeポインタをメモリベクタの終端を超えてインクリメントしようとした時。
ガベージコレクションの処理が完了した時、rootポインタは新しいメモリの中を指し示し、rootからアクセス可能な全てのオブジェクトは新しいメモリに移動されている。
そしてfreeポインタは新しいメモリ内の新しいペアを割り当てられる次の位置を示す。
加えて、ワーキングメモリと新しいメモリの役割が交換される。
新しいペアはfreeにより示される一からはじまる新しいメモリ内の構築され、以前のワーキングメモリは次のガベージコレクションに対する新しいメモリとして使用可能となる。

ガベージコレクション処理の状態は2つのポインタを管理することによりコントロールされている。freeとscanです。
これらは新しいメモリの開始位置を指し示すように初期化される。アルゴリズムはrootにより指し示されるペアの新しいメモリの開始位置への再配置から開始される。
ペアはコピーされ、rootポインタは新しい位置を指すように調整される。
そしてfreeポインタがインクリメントされる。合わせて、ペアの古い位置はその中身が移動されたことを示すマークがツケられる。
このマーキングは次のように行われる。
carの位置にはこれが既に移動されたオブジェクトであることを示す特別なタグを置く。
(このようなオブジェクトは伝統的にbroken heartと呼ばれる)
cdrの位置にはforwarding address(転送先)を置く。
これはオブジェクトの移動先の位置を指し示す。
rootの再配置の後に、ガベージコレクタは基本となるサイクルに入る。
アルゴリズムの各ステップにおいて、scanポインタ(初期値として再配置後のrootを指す)は新しいメモリに移動されたがそのcarとcdrのポインタが依然として古いメモリ内のオブジェクトを参照しているペアを指す。
これらのオブジェクトはそれぞれが再配置され、scanポインタはインクリメントされる。
オブジェクト(例えば操作しているペアのcarポインタにより指されたオブジェクト)を再配置するためにはそのオブジェクトが既に移動されていないかを(そのオブジェクトのcarのいち内にbroken-heartタグが存在することにより示されていないか)確認する。
もしオブジェクトがまだ移動されていなければ、それをfreeにより示される位置にコピーし、freeを更新し、オブジェクトの古い位置にbroken-heartを設定し、そのオブジェクトへのポインタを(この例では、操作しているペアのcarポインタを)更新し、新しい位置を指すようにする。
もしオブジェクトがすでに移動されている場合には、(broken-heartのcdrの位置に見つかる)その移動先は操作中のペアのポインタに置き換えられる。
最終的には、scanポインタがfreeポインタを追い越す時点まで、全てのアクセス可能なオブジェクトは移動され、精査される。
そして処理は停止する。
stop-and-copyアルゴリズムをレジスタマシンの命令列として記述することができる。
オブジェクトの再配置の基本的なステップはrelocate-old-result-in-newと呼ばれるサブルーチンにて達成される。
このサブルーチンはその引数として再配置するオブジェクトのポインタをoldという名のレジスタから取得する。
これは指定されたオブジェクトを再配置し、処理の間にfreeをインクリメントし、再配置されたオブジェクトを指すポインタをnewと呼ばれるレジスタに入れる。
そしてrelocate-continueレジスタに格納されたエントリポイントへ分岐することで返る。
ガベージコレクションをはじめるために、このサブルーチンを起動して、freeとscanを初期化した後にrootポインタを再配置する。
rootの再配置が完了した時に、newポインタを新しいrootとして導入し、ガベージコレクタのメインループに入る。

begin-garbage-collection
(assign free (const 0))
(assign scan (const 0))
(assign old (reg root))
(assign relocate-continue (label reassign-root))
(goto (label relocate-old-result-in-new))

reassign-root
(assign root (new reg))
(goto (label gc-loop))

ガベージコレクタのメインループでは走査すべきオブジェクトが残っているのか決定しなければならない。
これをscanポインタがfreeポインタと一致するかどうかを試験することで行う。
もしポインタが等しければ、全てのアクセス可能なオブジェクトの再配置は完了し、gc-flipへと分岐する。
ここは後片付けを行い、割り込みが行われた演算を継続する。
もしまだ走査すべきペアが残っているのであれば、再配置のサブルーチンを呼び出し次のペアのcarを(old内のcarポインタを配置することで)再配置する。
relocate-continueレジスタの設定によりサブルーチンはcarポインタを更新するために返る。

gc-loop
(test (op =) (reg scan) (reg free))
(branch (label gc-flip))
(assign old (op vector-ref) (reg new-cars) (reg scan))
(assign relocate-continue (label update-car))
(goto (label relocate-old-result-in-new))

update-carにて、精査しているペアのcarポインタを変更します。次にペアのcdrを再配置するために向かう。
再配置が完了すると、update-cdrに返ってくる。
再配置とcdrの更新の後に、そのペアの精査を完了しメインループを継続する。

update-car
(perform (op vector-set!)
         (reg new-cars)
         (reg scan)
         (reg new))
(assign old (op vector-ref) (reg new-cdrs) (reg scan))
(assign relocate-continue (label update-cdr))
(goto (label relocate-old-result-in-new))

update-cdr
(perform (op vector-set!)
         (reg new-cdrs)
         (reg scan)
         (reg new))
(assign scan (op +) (reg scan) (const 1))
(goto (label gc-loop))

サブルーチンrelocate-old-result-in-newはオブジェクトを次のように配置する。
もしoldにより指し示される再配置すべきオブジェクトがペアでないなら、そのオブジェクトへの同じポインタを変更無しで(newの中で)返す。
そうでなければ、再配置を実行しなければならない。もしペアの再配置すべきcarの位置にbroken-heartを持つのならば、そのペアは実際には移動されている。従って移動先を取得し、これをnewに入れて返す。もしold内のポインタがまだ移動されていないペアを指す場合、そのペアをfreeが指し示す新しいメモリの最初の空きセルに移動させ、broken-heartタグと移動先を元の位置に格納することでbroken-heartを設定する。

relocate-old-result-in-new
(test (op pointer-to-pair?) (reg old))
(branch (label pair))
(assign new (reg old))
(goto (reg relocate-continue))

pair
(assign oldcr (op vector-ref) (reg the-cars) (reg old))
(test (op broken-heart?) (reg oldcr))
(branch (label already-moved))
(assign new (reg free)) ; ペアの新しい位置
;; freeポインタを更新する
(assign free (op +) (reg free) (const 1))
;; carとcdrを新しいメモリにコピーする
(perform (op vector-set!)
         (reg new-cars) (reg new) (reg oldcr))
(assign oldcr (op vector-ref) (reg the-cdrs) (reg old))
(perform (op vector-set!)
         (reg new-cdrs) (reg new) (reg oldcr))
;; broken-heart
(perform (op vector-set!)
         (reg the-cars) (reg old) (const broken-heart))
(perform
 (op (vector-set!) (reg the-cdrs) (reg old) (reg new))
 (goto (reg relocate-continue)))

already-moved
(assign new (op vector-ref) (reg the-cdrs) (reg old))
(goto (reg relocate-continue))

ガベージコレクション処理の最後に、メモリの新旧の役割をポインタを交換することにより交代する。
the-carsとthe-cdrsそしてthe-cdrsとnwe-cdrsを交換する。
gc-flip
(assign temp (reg the-cdrs))
(assign the-cdrs (reg newcdrs))
(assign new-cdrs (reg temp))
(assign temp (reg the-cars))
(assign the-cars (reg new-cars))
(assign new-cars (reg temp))
