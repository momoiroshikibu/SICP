5.4.1 明示制御評価機の核

評価機の中心的な要素はeval-dispatchではじまる命令列。
コントローラがeval-dispatchから開始する時、expにより指定された式をenvにより指定された環境にて評価する。
評価が完了した時には、コントローラはcontinueに格納されたエントリポイントに飛ぶ。
その時、valレジスタが式の値を保持している。

eval-dispatch
(test (op self-evaluating?) (reg exp))
(branch (label ev-self-eval))
(test (op variable?) (reg exp))
(branch (label ev-variable))
(test (op quoted?) (reg exp))
(branch (label ev-quoted))
(test (op assignment?) (reg exp))
(branch (label ev-assignment?) (reg exp))
(test (op definition?) (reg exp))
(branch (label ev-definition))
(test (op if?) (reg exp))
(branch (label ev-if))
(test (op lambda?) (reg exp))
(branch (label ev-lambda))
(test (op begin?) (reg exp))
(branch (label ev-begin))
(test (op application?))
(branch (label ev-application))
(goto (label unknown-expression-type))


単純な式の評価
数値と文字列(これらは自己評価)、変数、クォーテーション、そしてlambda式は評価するべき部分式がありません。
これのために、評価機は単純に正しい値をvalレジスタに配置し、continueにより指定されたエントリポイントから継続します。
単純な式の評価は以下のコントローラのコードにより実行されます。

ev-self-eval
(assign val (reg exp))
(goto (reg continue))

ev-variable
(assign
 val (op lookup-variable-value) (reg exp) (reg env))
(goto (reg continue))

eva-quoted
(assign val (op text-of-quotation) (reg exp))
(goto (reg continue))

ev-lambda
(assign unev (op lambda-parameters) (reg exp))
(assign exp (op lambda-body) (reg exp))
(assign val (op make-procedure)
        (reg unev) (reg exp) (reg env))
(goto (env continue))

ev-lambdaがどのようにunevとexpレジスタを用いてラムダ式のパラメタとボディを保持し、envの中の環境と共にmake-procedure命令に引き渡されるのか観察してください。


手続適用の評価
手続きの適用はオペレータとオペランドを含む組み合わせにより指定します。
オペレータはその値が手続きとなる部分式であり、オペランドはその値が引数となる部分式で、その引数に対して手続きが適用されねばならない。
メタ循環のevalは適用をそれ自身を再帰的に呼び出すことで扱い、組み合わせの各要素を評価し、そして結果をapplyに渡します。
これが実際の手続き適用を実行します。明示的制御評価機も同じことを行います。
これらの再帰呼び出しはgoto命令と共に、スタックを使用して再帰呼び出しから戻った時に再格納されるようにレジスタを保存することで実装される。
各呼び出しの前にどのレジスタが保存されなければならないのかの確認に注意をしなければなりません。

適用の評価はオペレータを評価し手続きを生成することから開始します。
手続きは後に評価されたオペランドに適用されます。
オペレータを評価するためには、それをexpレジスタに移動させ、eval-dispatchへ飛びます。
envレジスタ内の環境は既にその中でオペレータを評価するために適切なものになっていますが、それでもenvを保存します。
オペランドの評価にも必要なためです。またオペランドをunevの中に展開し、スタック上にこれを保存します。
continueに対しeval-dispatchがオペレータの評価が完了した後にev-appl-did-operatorにてresumeできるように設定します。
しかし、最初にcontinueの古い値は保存します。これがコントローラに対し適用後にどこから続行するのかを告げるためです。

ev-application
(save continue)
(save env)
(assign unev (op operands) (reg exp))
(save unev)
(assign exp (op operator) (reg exp))
(assign continue (label ev-appl-did-operator))
(goto (label eval-dispatch))

オペレータ式の部分式の評価から帰還すると、組み合わせのオペランドの評価と、結果としての引数をarglに保持されるリストの中への蓄積へと進みます。
最初に未評価のオペランドと環境を戻します。arglを空リストに初期化します。
そしてprocレジスタにオペレータの評価により生成された手続きを割り当てます。
もしオペランドが無ければ、直接apply-dispatchへと進みます。そうでなければ、procをスタックに保存し引数評価ループを開始します。

ev-appl-did-operator
(restore unev)
(restore env)
(assign argl (op empty-arglist))
(assign proc (reg val))
(test (op no-operands?) (reg unev))
(branch (label apply-dispatch))
(save proc)

引数評価ループの各サイクルはunevの中のリストからオペランドを評価し、その結果をarglの中に蓄積します。
オペランドを評価するために、それをexpレジスタの中に入れ、実行が引数蓄積段階から再開できるようcontinueを設定した後にeval-dispatchに飛びます。
しかし、私たちはそれまでに(arglに保持されている)蓄積された引数、環境(envに維持)、評価されていない残りのオペランド(unevが保持)を保存します。最後のオペランドの評価は特別な場合として扱われ、ev-appl-last-argにより取り扱われます。

ev-appl-operand-loop
(save argl)
(assign exp (op first-operand) (reg unev))
(test (op last-operand?) (reg unev))
(branch (label ev-appl-last-arg))
(save env)
(save unev)
(assign continue (label ev-appl-accumulate-arg))
(goto (label eval-dispatch))

オペランドが評価された時に、その値はarglにて保持されるリストの中に蓄積されます。
そのオペランドはその後unev中の未評価オペランドのリストから消され、引数評価が続行されます。

ev-appl-accumulate-arg
(restore unev)
(restore env)
(restore argl)
(assign argl (op adjoin-arg) (rev val) (reg argl))
(assign unev (op rest-operands) (reg unev))
(goto (label ev-appl-operand-loop))

最後の引数は異なる扱いを受けます。環境や未評価のオペランドのリストをeval-dispatchに飛ぶ前に保存する必要がありません。
最後のオペランドが評価された後にそれらは必要が無いためです。
従って評価から特別なエントリポイントev-appl-accum-last-argeに帰ります。
これは引数リストを戻し、新しい引数を蓄積し、保存された手続きを戻し、適用を実行するために飛びます。

ev-appl-last-arg
(assign continue (label ev-appl-accum-last-arg))
(goto (label eval-dispatch))

ev-appl-accum-last-arg
(restore argl)
(assign argl (op adjoin-arg) (reg val) (rev argl))
(restore proc)
(goto (label apply-dispatch))

引数評価ループの詳細はインタプリタが組み合わせのオペランドを評価する順を決定します。
この順はメタ循環評価機では決定されません。その制御構造をその基礎をなし、実装を行うSchemeから継承するため。


手続適用
エントリポイントapply-dispatchはメタ循環評価機のapply手続きに対応する。
apply-dispatchに到達する時に、procレジスタは適用するための手続きを持ち、arglは適用するべき評価された引数のリストを持ちます。(もともとはeval-dispatchに渡され、ev-applicationで保存された)continueの保存された値は手続き適用の結果と共に帰る場所を伝えるが、スタック上に存在する。
適用が完了した時に、コントローラは保存されたcontinueにより指示されたエントリポイントへ、val内の適用の結果と共に移動します。
メタ循環のapplyと同様に、考慮すべき2つの場合が存在します。
適用すべき手続きはプリミティブであるか、または複合手続きであるかです。

apply-dispatch
(test (op primitive-procedure?) (reg proc))
(branch (label primitive-apply))
(test (op compound-procedure?) (reg proc))
(branch (label compound-apply))
(goto (label unknown-procedure-type))

各プリミティブは引数をarglから取得し、その結果をval内に実装されていると想定されます。
機械がどのようにプリミティブを扱うかを指定するためには、それぞれのプリミティブを実装するための一連のコントローラ命令を提供しなければならず、procの中身により判別されたプリミティブのための命令への割り振りを行うようにprimitive-applyを準備しなければなりません。
評価処理の構造に興味が有るため、それらの代わりに単にapply-primitive-procedureを使用する。
これはproc内の手続きをargl内の引数に対して適用する。
根底にあるSchemeシステムを適用を実行するために呼び出す。
プリミティブの適用の値を計算した後に、continueを戻して指定されたエントリポイントに飛ぶ。

primitive-apply
(assign val (op apply-primitive-procedure)
        (reg proc)
        (reg argl))
(restore continue)
(goto (reg continue))

複合手続きを適用するためには、メタ循環評価機と全く同様に進行する。
手続きのパラメタを引数に束縛するフレームを構築し、このフレームを用いて手続きにより運ばれた環境を拡張子、この拡張環境の中で手続きのボディを形成する式の列を評価する。

compound-apply
(assign univ (op procedure-parameters) (reg proc))
(assivn env (op procedure-environment) (reg proc))
(assign env (op extend-environment)
        (reg univ) (reg argl) (reg env))
(assign univ (op procedure-body) (reg proc))
(goto (label ev-sequence))

compound-applyはenvレジスタが新しい値を割り当てられるインタプリタ内で唯一の場所。
新しい環境は手続きにより運ばれた環境から引数リストと対応する束縛される変数のリストと共に構築される。

