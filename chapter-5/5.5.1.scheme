5.5.1 コンパイラの構造

手続きcompileはコンパイラ内のトップレベルの割り振り。
analyze, eval-dispatchに対応する。
compileはコンパイルされる式の構文の方の事例分析を実行する。
各式の型に対し、特別なcode generatorを割り振る。


(define (compile exp target linkage)
  (cond ((self-evaluating? exp)
         (compile-self-evaluating exp target linkage))
        ((quoted? exp) (compile-quoted exp target linkage))
        ((variable? exp)
         (compile-variable exp target linkage))
        ((assignment? exp)
         (compile-assignment exp target linkage))
        ((definition? exp)
         (compile-definition exp target linkage))
        ((if? exp) (compile-if exp target linkage))
        ((lambda? exp) (compile-lambda exp target linkage))
        ((begin? exp)
         (compile-sequence
          (begin-actions exp) target linkage))
        ((cond? exp)
         (compile (cond->if exp) target linkage))
        ((application? exp)
         (compile-application exp target linkage))
        (else
         (error "Unknown expression type: COMPILE" exp))))


ターゲットとリンク記述子
compileとそれが呼ぶコード生成器はコンパイル対象の式に加えて2つの引数を取ります。
コンパイルされたコードがその中で式の値を返すレジスタを指定するtargetと実行が完了した時に、式のコンパイル結果としてのコードがどのように続けるべきかを説明するlinkage descriptor(リンク記述子)です。
リンク記述子はコードが以下の3つのうち1つを行うよう要求することができる。

・列の次の命令を続ける(next)
・コンパイルしている手続きから戻る(return)
・名前付きエントリポイントへ飛ぶ(ラベル)

例えば、式5(自己評価型)をターゲットをレジスタvalリンク記述子をnextでコンパイルするとき、以下の命令を生成する。
(assign val (const 5))

同じ指揮をリンク記述子returnでコンパイルするときには以下の命令
(assign val (const 5))
(goto (reg continue))

最初の場合は、実行は列内の次の命令と共に続行する。
2つ目の場合には、手続き呼び出しから戻る。
両者の場合において、式の値はターゲットレジスタvalに配置される。


命令列とスタックの使用法
各コード生成器は式のために生成したオブジェクトコードを含むinstruction sequence(命令列)を返す。
複合式に対するコード生成は部分式のためのより単純なコード生成器からの出力を組み合わせることにより達成される。
これは複合式の評価が部分式を評価することにより達成されるのと同じ。
命令列を組み合わせる最も単純な手法はappend-instruction-sequencesという手続き。
これは引数として順に実行されるべき任意の数の命令列を取り、それらを接続し、組み合わされた列を返す。
つまり、もし<seq1>と<seq2>が命令列であるならば、以下の評価は
(append-instruction-sequences <seq1> <seq2>)
次の列を生成する
<seq1>
<seq2>

レジスタが保存される必要がある度に、コンパイラのコード生成器はpreservingを使用する。
これは命令列を組み立てるための、より芸が細かい手法。
preservingは3つの引数を取る。レジスタの集合と2つの命令列。
これは列をレジスタ集合内の各レジスタの中身が2つ目の列の実行に必要ならば、最初の列の実行の間は維持preserveされるような方法で接続する。
言い換えれば、もし最初の命令列がレジスタを変更し、2つ目の列が実際のそのレジスタの元の中身を必要とするならば、preservingは列を接続する前に最初の列をそのレジスタのsaveとrestoreで包む。
そうでなければ、preservingは単純に接続した命令列を返す。
従って、例えば(preserving (list <reg1> <reg2>) <seg1> <seg2>)は、<seq1>と<seq2>がどのように<reg1>と<reg2>を使用するかに依存して以下の4つの命令列のうち1つを生成する。

preservingを用いて命令列を組み立てることにより、コンパイラは不必要なスタック命令を回避することが可能になる。
これはまたsaveとrestoreの命令をpreserving手続きの中で生成するか、しないかの詳細を分離し、個別のコード生成器それぞれを書く場合に浮かび上がる考慮点から隔離する。
実際にsaveとrestoreの命令は明示的にはコード生成器により生成されることはない。

原理上は、命令列を単純に命令のリストとして表現できる。append-instruction-sequencesはそうすると命令列の組み立てを通常のリストのappendで行える。
するとしかし、preservingは複雑な命令になる。それが各命令列に対し、レジスタをどのように使用するかの分析を行わなければならないため。
また複数であると同様にpreservingが非効率にもなる。
書く命令列の引数をも分析しなければならなくなるため。
たとえこれらの列自信がpreservingの呼び出しにより構築されていて、それらの部品がすでに分析されていても。
そのような分析の繰り返しを防ぐために、各命令列とそのレジスタ使用に関する情報とを結びつける。
基本的な命令列を構築するときに、私たちはこの情報を明示的に与える。
そして命令列を接続する手続きは列の組み合わせのために、レジスタ使用の情報を構成部品である列に結び付けられた情報から引き出す。
命令列は3つの情報を持つ。
・命令列内の命令が実行される前に初期化しなければならないレジスタ集合
  (これらのレジスタは命令列によりneededと述べられている)
・列内の命令によりその値が変更されるレジスタ集合
・列内の実際の命令(statementsとも呼ばれる)

命令列を3つの部品として表現する。コンストラクタは以下のようになる。

(define (make-instruction-sequence
         needs modifies statements)
  (list needs modifies statements))

たとえば、現在の環境内で変数xの値を探し、その結果をvalに割り当てて戻る2つの命令の列はレジスタenvとcontinueが初期化される必要があり、
そしてレジスタvalを変更する。

(make-instruction-sequence
 '(env continue)
 '(val)
 '((assign val
           (op lookup-variable-value) (const x) (reg env))
   (goto (reg continue))))

時々、命令文が無い命令列を構築する必要がある。
(define (empty-instruction-sequence)
  (make-instruction-seuence '() '() '()))
