5.5.2 式のコンパイル

リンクコードのコンパイル
一般的に、各コード生成器の出力は手続きcompile-linkageにより生成された、要求されたリンク記述子を実装した命令で終わる。
もしリンク記述子がreturnなら、命令(goto (reg continue))を生成しなければならない。
これはcontinueレジスタを必要とし、他のレジスタを変更はしない。
もしリンク記述子がnextなら、なんの追加の命令も必要ない。
さもなければ、リンク記述子はラベルであり、そのラベルへのgotoを生成する。
この命令はレジスタを必要とせず、変更もしない。

(define (compile-linkage) linkage
  (cond ((eq? linkage 'return)
         (make-instruction-sequence '(continue) '()
                                    '((goto (reg continue)))))
        ((eq? linkage 'next)
         (empty-instruction-sequence))
        (else
         (make-instruction-sequence '() '()
                                    `((goto (label ,linkage)))))))

リンクのコードが命令列に対しpreservingによりcontinueレジスタを維持しながら追加される。
リンク記述子returnがcontinueレジスタを必要とするため。
もし与えられた命令列がcontinueを変更し、リンクのコードがそれを必要とする場合、continueは保存と復元が行われる。
(define (end-with-linkage linkage instruction-sequence)
  (preserving '(continue)
              instruction-sequence
              (compile-linkage linkage)))


単純な式のコンパイル
自己評価式、クォート、変数に対するコード生成器は必要な値をターゲットのレジスタに割当リンク記述子により指示されたように勧める命令列を構築します。
(define (compile-self-evaluating exp target linkage)
  (end-with-linkage linkage
                    (make-instruction-sequence '() (list target)
                                               `((assign ,target (const ,exp))))))
(define (compile-quoted exp target linkage)
  (end-with-linkage linkage
                    (make-instruction-sequence '() (list target)
                                               `((assign ,target (const ,(text-of-quotation exp)))))))
(define (compile-variable exp target linkage)
  (end-with-linkage linkage
                    (make-instruction-sequence '(env) (list target)
                                               `((assign ,target
                                                         (op lookup-variable-value)
                                                         (const ,exp)
                                                         (reg env))))))

これらすべての代入命令はターゲットレジスタを変更します。
また変数の検索を行うものはenvレジスタを必要とします。
代入と定義はインタプリタのものと同様に扱われます。再帰的に変数に割り当てられる値を求めるコードを生成し、それに対して実際に変数の設定、
または定義を行うものと式全体の値(シンボルOK)を割り当てるものの2つの命令列を接続します。
再帰的なコンパイルはターゲットvalとリンク記述子nextを持つのでコードはその結果をvalに入れ、その後に接続されたコードを用いて続けられる。
接続はenvを維持(preserving)している間に行われる。
環境が変数の設定、または定義のため必要なため。
また変数の値のためのコードは複雑な式のコンパイルとなり得るため任意の方法でレジスタを変更する可能性がある。

(define (compile-assignment exp target linkage)
  (let ((var (assignment-variabel exp))
        (get-value-code
         (compile (assignment-value exp) 'val 'next)))
    (end-with-linkage linkage
                      (preserving '(env)
                                  get-value-code
                                  (make-instruction-sequence '(env val) (list target)
                                                             `((perform (op set-variable-value!)
                                                                        (const ,var)
                                                                        (reg val)
                                                                        (reg env))
                                                               (assign ,target (const ok))))))))

接続された2つの命令列はenvとvalを必要とし、ターゲットを変更する。
たとえenvをこの列のために維持したとしても、valは維持しない。get-value-codeが明示的にその結果をこの命令列のためにvalに配置するように設計されているため。
