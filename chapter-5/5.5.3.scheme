5.5.3 組み合わせのコンパイル

コンパイル処理の本質は手続き適用のコンパイル。
与えられたターゲットとリンク記述子と共にコンパイルされた組み合わせのコードは以下の形式を持つ。
<演算子のコンパイル, ターゲットproc, リンク記述子 next>
<オペランドを評価し、argl内に引数リストを構築>
<手続き呼び出しのコンパイル
 与えられたターゲットとリンク記述子と共に>

レジスタenv, proc, arglはオペレータ(演算子)とオペランドの評価の間に保存と復元を行う必要があるかもしれない。
ここだけがこのコンパイラにおいてval以外のターゲットが指定される箇所であることに注意。
必要なコードはcompile-applicationにより生成される。
これは再帰的にオペレータをコンパイルしてprocに適用する手続きを配置するコードを生成し、オペランドをコンパイルして個別の適用の個々のオペランドを評価するコードを生成する。
オペランドの命令は(construct-arglistにより)arglに引数リストを構築するコードと共に組み合わされる。
コードの列の接続において、envレジスタはオペレータの評価の周りにおいて維持(preserving)されていなければならない。
(オペレータの評価がオペランドの評価で必要なenvを変更する可能性があるため)
そしてprocレジスタは引数リストの周りで維持されなければならない。
(オペランドの評価が実際の手続き適用に必要なprocレジスタを変更するかもしれないため。)
continueもまたその間中、維持されなければならない。手続き呼び出しのリンクコードが必要とするため。

(define (compiile-application exp target linkage)
  (let ((proc-code (compile (operator exp) 'proc 'next))
        (operand-codes
         (map (lambda (operand) (compile operand 'val 'next))
              (operands exp))))
    (preserving '(env continue)
                proc-code
                (preserving '(proc continue)
                            (construct-arglist operand-codes)
                            (compile-procedure-call target linkage)))))

引数リストを構築するためのコードはval内に評価して、次にその値をarglに蓄積される引数リスト上にconsする。
argl上に順に引数をocnsするため、最後の引数から開始し、最初のもので終わらなければならない。
そうすることで引数は結果リストの中に最初から最後の順で表れることになる。
この一連の評価のための設定を行うため、arglを空に初期化することで命令をムダにするのではなく、arglの初期値を構築する最初のコード列を作成する。

<最後のオペランドのコンパイル, ターゲットはval>
(assign argl (op list) (reg val))
<次のオペランドのこpナイル, ターゲットはval>
(assign argl (op cons) (reg val) (reg argl))
...
<最初のオペランドのこpナイル, ターゲットはval>
(assign argl (op cons) (reg val) (reg argl))

arglは各オペランドの評価の間、最初の1つを除いて維持しなければならない。
(そうすることで、そこまで蓄積した引数を失わないように)
そしてenvは(続きのオペランド評価での仕様のため)
各オペランドの評価の周りで、最後の1つを除いて維持されなければならない。

この引数コードのコンパイルは少しだけ巧妙。
評価する最初のオペランドの特別な扱いと、arglとenvを異なる場所にて維持する必要性のため。
construct-arglist手続きは引数として個々のオペランドを評価するコードを取る。
もしオペランドが全く無ければ、単純に以下の命令を発行する。
(assign argl (const ()))

そうでなければ、construct-arglistはarglを最後の引数で初期化するコードを生成し、引数の残りを評価するコードを接続し、
それらを相次いでarglの中に隣接する。
引数を最後から最初へ処理するために、オペランドのコード列のリストをcompile-applicationにより提供された順から逆順にするひつようがある。
(define (construct-arglist operand-codes)
  (let ((oeprand-codes (reverse operand-codes)))
    (if (null? operand-codes)
        (make-instruction-sequence '() '(argl)
                                   '((assign argl (const ()))))
        (let ((code-to-get-last-arg
               (append-instruction-sequences
                (car operand-codes)
                (make-instruction-sequence '(val) '(argl)
                                           ''((assign argl (op list) (reg val)))))))
          (if (null? (cdr operand-codes))
              code-to-get-last-arg
              (preserving '(env)
                          code-to-get-last-arg
                          (code-to-get-rest-args
                           (cdr operand-codes))))))))

(define (code-to-get-rest-args operand-codes)
  (let ((code-for-next-arg
         (preserving '(argl)
                     (car operand-codes)
                     (make-instruction-sequence '(val argl) '(argl)
                                                '((assign argl
                                                          (op cons) (reg val) (reg argl)))))))
    (if (null? (cdr operand-codes))
        code-for-next-arg
        (preserving '(env)
                    code-for-next-arg
                    (code-to-get-rest-args (cdr operand-codes))))))


手続きの適用
プリミティブな手続きに対してはapply-primitive-procedureを使用する。
(test (op primitive-procedure?) (reg proc))
(branch (label primitive-branch))

compiled-branch
<与えられたターゲットと適切なリンク記述子と共に手続き位をコンパイルするコード>

primitive-branch
(assign <target>
        (op apply-primitive-procedure)
        (reg proc)
        (reg argl))
<リンクコード>
after-call

コンパイルされた分岐はprimitive-branchをスキップする必要がある。
従って、もし元の手続き呼び出しのリンク記述子がnextならば、複合分岐はprimitive-branchの後に挿入されたラベルへと飛ぶリンクコードを使用しなければならない。
(これはcompile-ifにおいて真の分岐のために使用されたリンクコードと同様)

(define (compile-procedure-call target linkage)
  (let ((primitive-branch (make-label 'primitive-branch))
        (compiled-branch (make-label 'compiled-branch))
        (after-call (make-label 'after-call)))
    (let ((compiled-linkage
           (if (eq? linkage 'next) after-call linkage)))
      (append-instruction-sequences
       (make-instruction-sequence '(proc) '()
                                  `((test (op primitive-procedure?) (reg proc))
                                    (branch (label ,primitive-branch))))
       (parallel-instruction-sequences
        (append-instruction-sequences
         compiled-branch
         (compile-proc-appl target compiled-linkage))
        (append-instruction-sequences
         primitive-branch
         (end-with-likage linkage
                          (make-instruction-sequence '(proc argl)
                                                     (list target)
                                                     `((assign ,target
                                                               (op apply-primitive-procedure)
                                                               (reg proc)
                                                               (reg argl)))))))
       after-call))))

プリミティブかつ、複雑な分岐は通常のappend-instruction-sequencesではなくparallel-instruction-sequencesを用いて接続される。
それらは順には実行されないため。


コンパイル済み手続きの適用
手続きの適用を取り扱うコードはコンパイラの最も微妙な部分。
例えそれが生成する命令列がとても短くても変わらない。
(compile-lambdaにより構築されたような)コンパイルされた手続きは手続きが開始する場所を指定するラベルであるエントリポイントを持つ。
このエントリポイントにてコードはvalに結果を求め、命令(goto (reg continue))を実行することにより戻る。
従って与えられたターゲットとリンク奇術師を伴う(compile-proc-applにより生成される)コンパイルされた手続きの適用はリンク奇術師がラベルであれば以下のようになる。

(assign continue (label proc-return))
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))
proc-return
(assign <target> (reg val)) ; ターゲットがvalでなければ含まれる
(goto (label <リンク記述子>))
またはリンク記述子がreturnの場合は次の通り。
(save continue)
(assign continue (label proc-return))
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))
proc-return
(assign <target> (reg val))
(restore continue)
(goto (reg continue))

このコードは手続きがproc-returnに戻るようにcontinueを設定し、手続きのエントリポイントへと飛ぶ。
proc-returnのコードは手続きの結果をvalからターゲットレジスタへと転送し、次にリンク記述子により指定された位置へと飛ぶ。
実際には、もしターゲットがvalでなければ、それはまさに私達のコンパイラが生成するコード。
しかし、通常はターゲットはvalであり、そのための手続きの結果は直接ターゲットレジスタに入れられ、コピーを行う特別な位置へ戻る必要はない。
その代わりに、手続きが直接呼び出しの元のリンク記述子により指定される場所へ直接戻るようにcontinueを設定する。

<continueにリンク記述子を設定>
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))

もしリンク記述子がラベルならば、手続きがそのラベルに戻るようにcontinueを設定する。
(assign continue (label <リンク記述子>))
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))

もしリンク記述子がreturnなら、continueを設定する必要はない。
それは既に望まれた位置を持っている。
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))

このリンク記述子returnの実装を用いて、コンパイラは末尾再帰のコードを生成する。
手続きボディの最後のステップとしての手続き呼び出しは直接移動を行いスタック上にどのような情報も保存しない。
その代わりに、手続き呼び出しの場合をreturnとターゲットvalを用いて、上記で示されたようにval以外のターゲットに対しても取り扱ったと仮定する。これは末尾再帰を損なう。
それでも、私達のシステムは任意の式に対して同じ値を与える。
しかし、私達が手続きを呼ぶ度に、continueを保存し、呼び出しの後に保存の取り消しを呼び出すことになる。
これらの余分な保存が入れこの手続呼び出しの間に蓄積される。

codecompile-proc-applは上記の手続き適用のコードを生成する。
これは呼び出しのためのターゲットがvalであるか、そしてリンク記述子がreturnであるかについて依存する4つの場合について考慮する。
命令列が全てレジスタを変更するために宣言されることについて注意。
手続きのボディの実行が自由な形でレジスタを変更することができるため。
ターゲットがvalであり、リンク記述子がreturnの場合に対するコードの列はcontinueを必要とすると宣言されていることに注意。

(define (compile-proc-appl target linkage)
  (cond ((and (eq? target 'val) (not (eq? linkage 'return)))
         (make-instruction-sequence '(proc) all-regs
                                    `((assign continue (label ,linkage))
                                      (assign val (op compiled-procedure-entry)
                                              (reg proc))
                                      (goto (reg val)))))
        ((and (not (eq? target 'val))
              (not (eq? linkage 'return)))
         (let ((proc-return (make-label 'proc-return)))
           (make-instruction-sequence '(proc) all-regs
                                      `((assign continue (label ,proc-return))
                                        (assign val (op compiled-procedure-entry)
                                                (reg proc))
                                        (goto (reg val))
                                        ,proc-return
                                        (assign ,target (reg val))
                                        (goto (label ,linkage))))))
        ((and (eq? target 'val) (eq? linkage 'return))
         (make-instruction-sequence
          '(proc continue)
          all-regs
          '((assign val (op compiled-parocedure-entry)
                    (reg proc))
            (goto (reg val)))))
        ((and (not (eq? target 'val))
              (eq? linkage 'return))
         (and (not (eq? target 'val))
              (eq? linkage 'return))
         (error "return linkage, target not val: COMPILE" target))))

