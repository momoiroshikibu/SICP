5.5.7 コンパイル済みコードと評価機の連結

私たちはまだコンパイルされたコードを評価機にどのようにロードするか、またはどのように実行するかについて説明していません。
ここでは明示的制御評価機がSection 5.4.4の時点にて定義された状態であると仮定する。
Scheme式をコンパイルし、結果としてのオブジェクトコードを評価機にロードし、評価機にごろーバル環境の中で実行させ、結果を表示し、評価機のドライバループへと入る手続きcompile-and-goを実装する。
また評価機を変更し、逐次翻訳された式がコンパイルされた手続きを逐次翻訳されたものと同じように呼ぶことができるようにもする。
するとコンパイルされた手続きを機械に入れてそれを呼び出すことができる。
(compile-and-go
 '(define (factorial n)
    (if (= n 1)
        1
        (* (factorial (- n 1)) n))))
;;; EC-Eval value:
ok
;;; EC-Eval input:
(factorial 5)
;;; EC-Eval value:
120

評価機にコンパイルされた手続きの取り扱いを可能にするには、apply-dispatchのコードを変更して、それがコンパイルされた手続きを(複合、またはプリミティブな手続きから区別可能なものとして)認識し、制御を直接コンパイルされたコードのエントリポイントへと移動させる必要がある。

apply-dispatch
(test (op primitive-procedure?) (reg proc))
(branch (label primitive-apply))
(test (op compound-procedure?) (reg proc))
(branch (label comopund-apply))
(test (op compiled-procedure?) (reg proc))
(branch (label compiled-apply))
(goto (label unknown-procedure-type))

compiled-apply
(restore continue)
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))

compiled-applyでのcontinueの復元に注意。
評価機はapply-dispatchにて継続がスタックの一番上になるように準備されている。
一方で、コンパイルされたコードのエントリポイントは継続がcontinueの中にあることを期待しています。
そのため、continueはコンパイルされたコードが実行される前に復元されなければなりません。
